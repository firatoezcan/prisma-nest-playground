/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SkillkeywordsCreateDto,
    SkillkeywordsCreateDtoFromJSON,
    SkillkeywordsCreateDtoToJSON,
} from '../models';

export interface SkillkeywordsEntityControllerCreateRequest {
    skillkeywordsCreateDto: SkillkeywordsCreateDto;
}

export interface SkillkeywordsEntityControllerDeleteRequest {
    id: string;
}

export interface SkillkeywordsEntityControllerFindOneRequest {
    id: string;
}

export interface SkillkeywordsEntityControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 * 
 */
export class SkillkeywordsApi extends runtime.BaseAPI {

    /**
     */
    async skillkeywordsEntityControllerCreateRaw(requestParameters: SkillkeywordsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.skillkeywordsCreateDto === null || requestParameters.skillkeywordsCreateDto === undefined) {
            throw new runtime.RequiredError('skillkeywordsCreateDto','Required parameter requestParameters.skillkeywordsCreateDto was null or undefined when calling skillkeywordsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skillkeywords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillkeywordsCreateDtoToJSON(requestParameters.skillkeywordsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerCreate(requestParameters: SkillkeywordsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerDeleteRaw(requestParameters: SkillkeywordsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillkeywordsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillkeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerDelete(requestParameters: SkillkeywordsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillkeywords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerFindOneRaw(requestParameters: SkillkeywordsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillkeywordsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillkeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerFindOne(requestParameters: SkillkeywordsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerUpdateRaw(requestParameters: SkillkeywordsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillkeywordsEntityControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling skillkeywordsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skillkeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerUpdate(requestParameters: SkillkeywordsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
