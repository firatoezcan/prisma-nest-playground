/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProfilesCreateDto,
    ProfilesCreateDtoFromJSON,
    ProfilesCreateDtoToJSON,
    ProfilesUpdateDto,
    ProfilesUpdateDtoFromJSON,
    ProfilesUpdateDtoToJSON,
} from '../models';

export interface ProfilesEntityControllerCreateRequest {
    profilesCreateDto: ProfilesCreateDto;
}

export interface ProfilesEntityControllerDeleteRequest {
    id: string;
}

export interface ProfilesEntityControllerFindOneRequest {
    id: string;
}

export interface ProfilesEntityControllerUpdateRequest {
    id: string;
    profilesUpdateDto: ProfilesUpdateDto;
}

/**
 * 
 */
export class ProfilesApi extends runtime.BaseAPI {

    /**
     */
    async profilesEntityControllerCreateRaw(requestParameters: ProfilesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.profilesCreateDto === null || requestParameters.profilesCreateDto === undefined) {
            throw new runtime.RequiredError('profilesCreateDto','Required parameter requestParameters.profilesCreateDto was null or undefined when calling profilesEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfilesCreateDtoToJSON(requestParameters.profilesCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerCreate(requestParameters: ProfilesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async profilesEntityControllerDeleteRaw(requestParameters: ProfilesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling profilesEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerDelete(requestParameters: ProfilesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async profilesEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async profilesEntityControllerFindOneRaw(requestParameters: ProfilesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling profilesEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerFindOne(requestParameters: ProfilesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async profilesEntityControllerUpdateRaw(requestParameters: ProfilesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling profilesEntityControllerUpdate.');
        }

        if (requestParameters.profilesUpdateDto === null || requestParameters.profilesUpdateDto === undefined) {
            throw new runtime.RequiredError('profilesUpdateDto','Required parameter requestParameters.profilesUpdateDto was null or undefined when calling profilesEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProfilesUpdateDtoToJSON(requestParameters.profilesUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerUpdate(requestParameters: ProfilesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
