/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReferencesCreateDto,
    ReferencesCreateDtoFromJSON,
    ReferencesCreateDtoToJSON,
    ReferencesUpdateDto,
    ReferencesUpdateDtoFromJSON,
    ReferencesUpdateDtoToJSON,
} from '../models';

export interface ReferencesEntityControllerCreateRequest {
    referencesCreateDto: ReferencesCreateDto;
}

export interface ReferencesEntityControllerDeleteRequest {
    id: string;
}

export interface ReferencesEntityControllerFindOneRequest {
    id: string;
}

export interface ReferencesEntityControllerUpdateRequest {
    id: string;
    referencesUpdateDto: ReferencesUpdateDto;
}

/**
 * 
 */
export class ReferencesApi extends runtime.BaseAPI {

    /**
     */
    async referencesEntityControllerCreateRaw(requestParameters: ReferencesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.referencesCreateDto === null || requestParameters.referencesCreateDto === undefined) {
            throw new runtime.RequiredError('referencesCreateDto','Required parameter requestParameters.referencesCreateDto was null or undefined when calling referencesEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/references`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReferencesCreateDtoToJSON(requestParameters.referencesCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerCreate(requestParameters: ReferencesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async referencesEntityControllerDeleteRaw(requestParameters: ReferencesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling referencesEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerDelete(requestParameters: ReferencesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async referencesEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async referencesEntityControllerFindOneRaw(requestParameters: ReferencesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling referencesEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerFindOne(requestParameters: ReferencesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async referencesEntityControllerUpdateRaw(requestParameters: ReferencesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling referencesEntityControllerUpdate.');
        }

        if (requestParameters.referencesUpdateDto === null || requestParameters.referencesUpdateDto === undefined) {
            throw new runtime.RequiredError('referencesUpdateDto','Required parameter requestParameters.referencesUpdateDto was null or undefined when calling referencesEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReferencesUpdateDtoToJSON(requestParameters.referencesUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerUpdate(requestParameters: ReferencesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
