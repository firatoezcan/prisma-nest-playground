/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    VolunteersCreateDto,
    VolunteersCreateDtoFromJSON,
    VolunteersCreateDtoToJSON,
    VolunteersUpdateDto,
    VolunteersUpdateDtoFromJSON,
    VolunteersUpdateDtoToJSON,
} from '../models';

export interface VolunteersEntityControllerCreateRequest {
    volunteersCreateDto: VolunteersCreateDto;
}

export interface VolunteersEntityControllerDeleteRequest {
    id: string;
}

export interface VolunteersEntityControllerFindOneRequest {
    id: string;
}

export interface VolunteersEntityControllerUpdateRequest {
    id: string;
    volunteersUpdateDto: VolunteersUpdateDto;
}

/**
 * 
 */
export class VolunteersApi extends runtime.BaseAPI {

    /**
     */
    async volunteersEntityControllerCreateRaw(requestParameters: VolunteersEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.volunteersCreateDto === null || requestParameters.volunteersCreateDto === undefined) {
            throw new runtime.RequiredError('volunteersCreateDto','Required parameter requestParameters.volunteersCreateDto was null or undefined when calling volunteersEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volunteers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteersCreateDtoToJSON(requestParameters.volunteersCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerCreate(requestParameters: VolunteersEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async volunteersEntityControllerDeleteRaw(requestParameters: VolunteersEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling volunteersEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerDelete(requestParameters: VolunteersEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async volunteersEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async volunteersEntityControllerFindOneRaw(requestParameters: VolunteersEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling volunteersEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerFindOne(requestParameters: VolunteersEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async volunteersEntityControllerUpdateRaw(requestParameters: VolunteersEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling volunteersEntityControllerUpdate.');
        }

        if (requestParameters.volunteersUpdateDto === null || requestParameters.volunteersUpdateDto === undefined) {
            throw new runtime.RequiredError('volunteersUpdateDto','Required parameter requestParameters.volunteersUpdateDto was null or undefined when calling volunteersEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteersUpdateDtoToJSON(requestParameters.volunteersUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerUpdate(requestParameters: VolunteersEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
