/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProjectsCreateDto,
    ProjectsCreateDtoFromJSON,
    ProjectsCreateDtoToJSON,
    ProjectsUpdateDto,
    ProjectsUpdateDtoFromJSON,
    ProjectsUpdateDtoToJSON,
} from '../models';

export interface ProjectsEntityControllerCreateRequest {
    projectsCreateDto: ProjectsCreateDto;
}

export interface ProjectsEntityControllerDeleteRequest {
    id: string;
}

export interface ProjectsEntityControllerFindOneRequest {
    id: string;
}

export interface ProjectsEntityControllerUpdateRequest {
    id: string;
    projectsUpdateDto: ProjectsUpdateDto;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     */
    async projectsEntityControllerCreateRaw(requestParameters: ProjectsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectsCreateDto === null || requestParameters.projectsCreateDto === undefined) {
            throw new runtime.RequiredError('projectsCreateDto','Required parameter requestParameters.projectsCreateDto was null or undefined when calling projectsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsCreateDtoToJSON(requestParameters.projectsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerCreate(requestParameters: ProjectsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectsEntityControllerDeleteRaw(requestParameters: ProjectsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerDelete(requestParameters: ProjectsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async projectsEntityControllerFindOneRaw(requestParameters: ProjectsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerFindOne(requestParameters: ProjectsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectsEntityControllerUpdateRaw(requestParameters: ProjectsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsEntityControllerUpdate.');
        }

        if (requestParameters.projectsUpdateDto === null || requestParameters.projectsUpdateDto === undefined) {
            throw new runtime.RequiredError('projectsUpdateDto','Required parameter requestParameters.projectsUpdateDto was null or undefined when calling projectsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsUpdateDtoToJSON(requestParameters.projectsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerUpdate(requestParameters: ProjectsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
