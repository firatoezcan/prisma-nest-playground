/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LocationsCreateDto,
    LocationsCreateDtoFromJSON,
    LocationsCreateDtoToJSON,
    LocationsUpdateDto,
    LocationsUpdateDtoFromJSON,
    LocationsUpdateDtoToJSON,
} from '../models';

export interface LocationsEntityControllerCreateRequest {
    locationsCreateDto: LocationsCreateDto;
}

export interface LocationsEntityControllerDeleteRequest {
    id: string;
}

export interface LocationsEntityControllerFindOneRequest {
    id: string;
}

export interface LocationsEntityControllerUpdateRequest {
    id: string;
    locationsUpdateDto: LocationsUpdateDto;
}

/**
 * 
 */
export class LocationsApi extends runtime.BaseAPI {

    /**
     */
    async locationsEntityControllerCreateRaw(requestParameters: LocationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.locationsCreateDto === null || requestParameters.locationsCreateDto === undefined) {
            throw new runtime.RequiredError('locationsCreateDto','Required parameter requestParameters.locationsCreateDto was null or undefined when calling locationsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationsCreateDtoToJSON(requestParameters.locationsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerCreate(requestParameters: LocationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationsEntityControllerDeleteRaw(requestParameters: LocationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling locationsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerDelete(requestParameters: LocationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async locationsEntityControllerFindOneRaw(requestParameters: LocationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling locationsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerFindOne(requestParameters: LocationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationsEntityControllerUpdateRaw(requestParameters: LocationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling locationsEntityControllerUpdate.');
        }

        if (requestParameters.locationsUpdateDto === null || requestParameters.locationsUpdateDto === undefined) {
            throw new runtime.RequiredError('locationsUpdateDto','Required parameter requestParameters.locationsUpdateDto was null or undefined when calling locationsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LocationsUpdateDtoToJSON(requestParameters.locationsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerUpdate(requestParameters: LocationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
