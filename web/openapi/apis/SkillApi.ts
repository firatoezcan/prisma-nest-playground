/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SkillCreateDto,
    SkillCreateDtoFromJSON,
    SkillCreateDtoToJSON,
    SkillUpdateDto,
    SkillUpdateDtoFromJSON,
    SkillUpdateDtoToJSON,
} from '../models';

export interface CreateSkillRequest {
    skillCreateDto: SkillCreateDto;
}

export interface DeleteSkillRequest {
    id: string;
}

export interface FindOneSkillRequest {
    id: string;
}

export interface UpdateSkillRequest {
    id: string;
    skillUpdateDto: SkillUpdateDto;
}

/**
 * 
 */
export class SkillApi extends runtime.BaseAPI {

    /**
     */
    async createSkillRaw(requestParameters: CreateSkillRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.skillCreateDto === null || requestParameters.skillCreateDto === undefined) {
            throw new runtime.RequiredError('skillCreateDto','Required parameter requestParameters.skillCreateDto was null or undefined when calling createSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillCreateDtoToJSON(requestParameters.skillCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createSkill(requestParameters: CreateSkillRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createSkillRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteSkillRaw(requestParameters: DeleteSkillRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteSkill(requestParameters: DeleteSkillRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteSkillRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findManySkillRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findManySkill(initOverrides?: RequestInit): Promise<void> {
        await this.findManySkillRaw(initOverrides);
    }

    /**
     */
    async findOneSkillRaw(requestParameters: FindOneSkillRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findOneSkill(requestParameters: FindOneSkillRequest, initOverrides?: RequestInit): Promise<void> {
        await this.findOneSkillRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateSkillRaw(requestParameters: UpdateSkillRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSkill.');
        }

        if (requestParameters.skillUpdateDto === null || requestParameters.skillUpdateDto === undefined) {
            throw new runtime.RequiredError('skillUpdateDto','Required parameter requestParameters.skillUpdateDto was null or undefined when calling updateSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SkillUpdateDtoToJSON(requestParameters.skillUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateSkill(requestParameters: UpdateSkillRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateSkillRaw(requestParameters, initOverrides);
    }

}
