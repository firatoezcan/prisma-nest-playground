/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LanguagesCreateDto,
    LanguagesCreateDtoFromJSON,
    LanguagesCreateDtoToJSON,
    LanguagesUpdateDto,
    LanguagesUpdateDtoFromJSON,
    LanguagesUpdateDtoToJSON,
} from '../models';

export interface LanguagesEntityControllerCreateRequest {
    languagesCreateDto: LanguagesCreateDto;
}

export interface LanguagesEntityControllerDeleteRequest {
    id: string;
}

export interface LanguagesEntityControllerFindOneRequest {
    id: string;
}

export interface LanguagesEntityControllerUpdateRequest {
    id: string;
    languagesUpdateDto: LanguagesUpdateDto;
}

/**
 * 
 */
export class LanguagesApi extends runtime.BaseAPI {

    /**
     */
    async languagesEntityControllerCreateRaw(requestParameters: LanguagesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.languagesCreateDto === null || requestParameters.languagesCreateDto === undefined) {
            throw new runtime.RequiredError('languagesCreateDto','Required parameter requestParameters.languagesCreateDto was null or undefined when calling languagesEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/languages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LanguagesCreateDtoToJSON(requestParameters.languagesCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerCreate(requestParameters: LanguagesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesEntityControllerDeleteRaw(requestParameters: LanguagesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerDelete(requestParameters: LanguagesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async languagesEntityControllerFindOneRaw(requestParameters: LanguagesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerFindOne(requestParameters: LanguagesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesEntityControllerUpdateRaw(requestParameters: LanguagesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesEntityControllerUpdate.');
        }

        if (requestParameters.languagesUpdateDto === null || requestParameters.languagesUpdateDto === undefined) {
            throw new runtime.RequiredError('languagesUpdateDto','Required parameter requestParameters.languagesUpdateDto was null or undefined when calling languagesEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LanguagesUpdateDtoToJSON(requestParameters.languagesUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerUpdate(requestParameters: LanguagesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
