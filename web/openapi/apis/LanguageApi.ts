/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LanguageCreateDto,
    LanguageCreateDtoFromJSON,
    LanguageCreateDtoToJSON,
    LanguageUpdateDto,
    LanguageUpdateDtoFromJSON,
    LanguageUpdateDtoToJSON,
} from '../models';

export interface CreateLanguageRequest {
    languageCreateDto: LanguageCreateDto;
}

export interface DeleteLanguageRequest {
    id: string;
}

export interface FindOneLanguageRequest {
    id: string;
}

export interface UpdateLanguageRequest {
    id: string;
    languageUpdateDto: LanguageUpdateDto;
}

/**
 * 
 */
export class LanguageApi extends runtime.BaseAPI {

    /**
     */
    async createLanguageRaw(requestParameters: CreateLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.languageCreateDto === null || requestParameters.languageCreateDto === undefined) {
            throw new runtime.RequiredError('languageCreateDto','Required parameter requestParameters.languageCreateDto was null or undefined when calling createLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/languages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageCreateDtoToJSON(requestParameters.languageCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createLanguage(requestParameters: CreateLanguageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createLanguageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteLanguageRaw(requestParameters: DeleteLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteLanguage(requestParameters: DeleteLanguageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteLanguageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findManyLanguageRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findManyLanguage(initOverrides?: RequestInit): Promise<void> {
        await this.findManyLanguageRaw(initOverrides);
    }

    /**
     */
    async findOneLanguageRaw(requestParameters: FindOneLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findOneLanguage(requestParameters: FindOneLanguageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.findOneLanguageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateLanguageRaw(requestParameters: UpdateLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLanguage.');
        }

        if (requestParameters.languageUpdateDto === null || requestParameters.languageUpdateDto === undefined) {
            throw new runtime.RequiredError('languageUpdateDto','Required parameter requestParameters.languageUpdateDto was null or undefined when calling updateLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageUpdateDtoToJSON(requestParameters.languageUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateLanguage(requestParameters: UpdateLanguageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateLanguageRaw(requestParameters, initOverrides);
    }

}
