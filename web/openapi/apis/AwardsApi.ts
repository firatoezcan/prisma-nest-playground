/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AwardsCreateDto,
    AwardsCreateDtoFromJSON,
    AwardsCreateDtoToJSON,
    AwardsUpdateDto,
    AwardsUpdateDtoFromJSON,
    AwardsUpdateDtoToJSON,
} from '../models';

export interface AwardsEntityControllerCreateRequest {
    awardsCreateDto: AwardsCreateDto;
}

export interface AwardsEntityControllerDeleteRequest {
    id: string;
}

export interface AwardsEntityControllerFindOneRequest {
    id: string;
}

export interface AwardsEntityControllerUpdateRequest {
    id: string;
    awardsUpdateDto: AwardsUpdateDto;
}

/**
 * 
 */
export class AwardsApi extends runtime.BaseAPI {

    /**
     */
    async awardsEntityControllerCreateRaw(requestParameters: AwardsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.awardsCreateDto === null || requestParameters.awardsCreateDto === undefined) {
            throw new runtime.RequiredError('awardsCreateDto','Required parameter requestParameters.awardsCreateDto was null or undefined when calling awardsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/awards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardsCreateDtoToJSON(requestParameters.awardsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerCreate(requestParameters: AwardsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awardsEntityControllerDeleteRaw(requestParameters: AwardsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling awardsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerDelete(requestParameters: AwardsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awardsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async awardsEntityControllerFindOneRaw(requestParameters: AwardsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling awardsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerFindOne(requestParameters: AwardsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awardsEntityControllerUpdateRaw(requestParameters: AwardsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling awardsEntityControllerUpdate.');
        }

        if (requestParameters.awardsUpdateDto === null || requestParameters.awardsUpdateDto === undefined) {
            throw new runtime.RequiredError('awardsUpdateDto','Required parameter requestParameters.awardsUpdateDto was null or undefined when calling awardsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AwardsUpdateDtoToJSON(requestParameters.awardsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerUpdate(requestParameters: AwardsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
