/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AwardCreateDto,
    AwardCreateDtoFromJSON,
    AwardCreateDtoToJSON,
    AwardUpdateDto,
    AwardUpdateDtoFromJSON,
    AwardUpdateDtoToJSON,
} from '../models';

export interface CreateAwardRequest {
    awardCreateDto: AwardCreateDto;
}

export interface DeleteAwardRequest {
    id: string;
}

export interface FindOneAwardRequest {
    id: string;
}

export interface UpdateAwardRequest {
    id: string;
    awardUpdateDto: AwardUpdateDto;
}

/**
 * 
 */
export class AwardApi extends runtime.BaseAPI {

    /**
     */
    async createAwardRaw(requestParameters: CreateAwardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.awardCreateDto === null || requestParameters.awardCreateDto === undefined) {
            throw new runtime.RequiredError('awardCreateDto','Required parameter requestParameters.awardCreateDto was null or undefined when calling createAward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/awards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardCreateDtoToJSON(requestParameters.awardCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createAward(requestParameters: CreateAwardRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createAwardRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteAwardRaw(requestParameters: DeleteAwardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAward(requestParameters: DeleteAwardRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAwardRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findManyAwardRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findManyAward(initOverrides?: RequestInit): Promise<void> {
        await this.findManyAwardRaw(initOverrides);
    }

    /**
     */
    async findOneAwardRaw(requestParameters: FindOneAwardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneAward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findOneAward(requestParameters: FindOneAwardRequest, initOverrides?: RequestInit): Promise<void> {
        await this.findOneAwardRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateAwardRaw(requestParameters: UpdateAwardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAward.');
        }

        if (requestParameters.awardUpdateDto === null || requestParameters.awardUpdateDto === undefined) {
            throw new runtime.RequiredError('awardUpdateDto','Required parameter requestParameters.awardUpdateDto was null or undefined when calling updateAward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AwardUpdateDtoToJSON(requestParameters.awardUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateAward(requestParameters: UpdateAwardRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateAwardRaw(requestParameters, initOverrides);
    }

}
