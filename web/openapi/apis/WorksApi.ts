/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WorksCreateDto,
    WorksCreateDtoFromJSON,
    WorksCreateDtoToJSON,
    WorksUpdateDto,
    WorksUpdateDtoFromJSON,
    WorksUpdateDtoToJSON,
} from '../models';

export interface WorksEntityControllerCreateRequest {
    worksCreateDto: WorksCreateDto;
}

export interface WorksEntityControllerDeleteRequest {
    id: string;
}

export interface WorksEntityControllerFindOneRequest {
    id: string;
}

export interface WorksEntityControllerUpdateRequest {
    id: string;
    worksUpdateDto: WorksUpdateDto;
}

/**
 * 
 */
export class WorksApi extends runtime.BaseAPI {

    /**
     */
    async worksEntityControllerCreateRaw(requestParameters: WorksEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.worksCreateDto === null || requestParameters.worksCreateDto === undefined) {
            throw new runtime.RequiredError('worksCreateDto','Required parameter requestParameters.worksCreateDto was null or undefined when calling worksEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/works`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorksCreateDtoToJSON(requestParameters.worksCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerCreate(requestParameters: WorksEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async worksEntityControllerDeleteRaw(requestParameters: WorksEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling worksEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerDelete(requestParameters: WorksEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async worksEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async worksEntityControllerFindOneRaw(requestParameters: WorksEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling worksEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerFindOne(requestParameters: WorksEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async worksEntityControllerUpdateRaw(requestParameters: WorksEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling worksEntityControllerUpdate.');
        }

        if (requestParameters.worksUpdateDto === null || requestParameters.worksUpdateDto === undefined) {
            throw new runtime.RequiredError('worksUpdateDto','Required parameter requestParameters.worksUpdateDto was null or undefined when calling worksEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorksUpdateDtoToJSON(requestParameters.worksUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerUpdate(requestParameters: WorksEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
