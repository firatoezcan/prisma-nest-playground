/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DMMF,
    DMMFFromJSON,
    DMMFToJSON,
} from '../models';

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async dmmfAppControllerRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<DMMF>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/dmmf`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DMMFFromJSON(jsonValue));
    }

    /**
     */
    async dmmfAppController(initOverrides?: RequestInit): Promise<DMMF> {
        const response = await this.dmmfAppControllerRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async healthAppControllerRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async healthAppController(initOverrides?: RequestInit): Promise<string> {
        const response = await this.healthAppControllerRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async worldAppControllerRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/world`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async worldAppController(initOverrides?: RequestInit): Promise<object> {
        const response = await this.worldAppControllerRaw(initOverrides);
        return await response.value();
    }

}
