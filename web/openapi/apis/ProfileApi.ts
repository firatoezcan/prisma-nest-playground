/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProfileCreateDto,
    ProfileCreateDtoFromJSON,
    ProfileCreateDtoToJSON,
    ProfileEntity,
    ProfileEntityFromJSON,
    ProfileEntityToJSON,
    ProfileUpdateDto,
    ProfileUpdateDtoFromJSON,
    ProfileUpdateDtoToJSON,
} from '../models';

export interface CreateProfileRequest {
    profileCreateDto: ProfileCreateDto;
}

export interface DeleteProfileRequest {
    id: string;
}

export interface FindOneProfileRequest {
    id: string;
}

export interface UpdateProfileRequest {
    id: string;
    profileUpdateDto: ProfileUpdateDto;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     */
    async createProfileRaw(requestParameters: CreateProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProfileEntity>> {
        if (requestParameters.profileCreateDto === null || requestParameters.profileCreateDto === undefined) {
            throw new runtime.RequiredError('profileCreateDto','Required parameter requestParameters.profileCreateDto was null or undefined when calling createProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCreateDtoToJSON(requestParameters.profileCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileEntityFromJSON(jsonValue));
    }

    /**
     */
    async createProfile(requestParameters: CreateProfileRequest, initOverrides?: RequestInit): Promise<ProfileEntity> {
        const response = await this.createProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteProfileRaw(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProfileEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteProfile(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit): Promise<ProfileEntity> {
        const response = await this.deleteProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyProfileRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProfileEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileEntityFromJSON));
    }

    /**
     */
    async findManyProfile(initOverrides?: RequestInit): Promise<Array<ProfileEntity>> {
        const response = await this.findManyProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneProfileRaw(requestParameters: FindOneProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProfileEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneProfile(requestParameters: FindOneProfileRequest, initOverrides?: RequestInit): Promise<ProfileEntity> {
        const response = await this.findOneProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProfileEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProfile.');
        }

        if (requestParameters.profileUpdateDto === null || requestParameters.profileUpdateDto === undefined) {
            throw new runtime.RequiredError('profileUpdateDto','Required parameter requestParameters.profileUpdateDto was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileUpdateDtoToJSON(requestParameters.profileUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateProfile(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit): Promise<ProfileEntity> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
