/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    VolunteerCreateDto,
    VolunteerCreateDtoFromJSON,
    VolunteerCreateDtoToJSON,
    VolunteerUpdateDto,
    VolunteerUpdateDtoFromJSON,
    VolunteerUpdateDtoToJSON,
} from '../models';

export interface CreateVolunteerRequest {
    volunteerCreateDto: VolunteerCreateDto;
}

export interface DeleteVolunteerRequest {
    id: string;
}

export interface FindOneVolunteerRequest {
    id: string;
}

export interface UpdateVolunteerRequest {
    id: string;
    volunteerUpdateDto: VolunteerUpdateDto;
}

/**
 * 
 */
export class VolunteerApi extends runtime.BaseAPI {

    /**
     */
    async createVolunteerRaw(requestParameters: CreateVolunteerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.volunteerCreateDto === null || requestParameters.volunteerCreateDto === undefined) {
            throw new runtime.RequiredError('volunteerCreateDto','Required parameter requestParameters.volunteerCreateDto was null or undefined when calling createVolunteer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volunteers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerCreateDtoToJSON(requestParameters.volunteerCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createVolunteer(requestParameters: CreateVolunteerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createVolunteerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteVolunteerRaw(requestParameters: DeleteVolunteerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVolunteer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteVolunteer(requestParameters: DeleteVolunteerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteVolunteerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findManyVolunteerRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findManyVolunteer(initOverrides?: RequestInit): Promise<void> {
        await this.findManyVolunteerRaw(initOverrides);
    }

    /**
     */
    async findOneVolunteerRaw(requestParameters: FindOneVolunteerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneVolunteer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findOneVolunteer(requestParameters: FindOneVolunteerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.findOneVolunteerRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateVolunteerRaw(requestParameters: UpdateVolunteerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVolunteer.');
        }

        if (requestParameters.volunteerUpdateDto === null || requestParameters.volunteerUpdateDto === undefined) {
            throw new runtime.RequiredError('volunteerUpdateDto','Required parameter requestParameters.volunteerUpdateDto was null or undefined when calling updateVolunteer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerUpdateDtoToJSON(requestParameters.volunteerUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateVolunteer(requestParameters: UpdateVolunteerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateVolunteerRaw(requestParameters, initOverrides);
    }

}
