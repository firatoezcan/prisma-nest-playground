/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EducationCreateDto,
    EducationCreateDtoFromJSON,
    EducationCreateDtoToJSON,
    EducationUpdateDto,
    EducationUpdateDtoFromJSON,
    EducationUpdateDtoToJSON,
} from '../models';

export interface CreateEducationRequest {
    educationCreateDto: EducationCreateDto;
}

export interface DeleteEducationRequest {
    id: string;
}

export interface FindOneEducationRequest {
    id: string;
}

export interface UpdateEducationRequest {
    id: string;
    educationUpdateDto: EducationUpdateDto;
}

/**
 * 
 */
export class EducationApi extends runtime.BaseAPI {

    /**
     */
    async createEducationRaw(requestParameters: CreateEducationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.educationCreateDto === null || requestParameters.educationCreateDto === undefined) {
            throw new runtime.RequiredError('educationCreateDto','Required parameter requestParameters.educationCreateDto was null or undefined when calling createEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EducationCreateDtoToJSON(requestParameters.educationCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createEducation(requestParameters: CreateEducationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createEducationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteEducationRaw(requestParameters: DeleteEducationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteEducation(requestParameters: DeleteEducationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteEducationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findManyEducationRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findManyEducation(initOverrides?: RequestInit): Promise<void> {
        await this.findManyEducationRaw(initOverrides);
    }

    /**
     */
    async findOneEducationRaw(requestParameters: FindOneEducationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findOneEducation(requestParameters: FindOneEducationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.findOneEducationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateEducationRaw(requestParameters: UpdateEducationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEducation.');
        }

        if (requestParameters.educationUpdateDto === null || requestParameters.educationUpdateDto === undefined) {
            throw new runtime.RequiredError('educationUpdateDto','Required parameter requestParameters.educationUpdateDto was null or undefined when calling updateEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EducationUpdateDtoToJSON(requestParameters.educationUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateEducation(requestParameters: UpdateEducationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateEducationRaw(requestParameters, initOverrides);
    }

}
