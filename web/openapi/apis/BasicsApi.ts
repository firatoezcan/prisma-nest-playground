/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BasicsCreateDto,
    BasicsCreateDtoFromJSON,
    BasicsCreateDtoToJSON,
    BasicsUpdateDto,
    BasicsUpdateDtoFromJSON,
    BasicsUpdateDtoToJSON,
} from '../models';

export interface BasicsEntityControllerCreateRequest {
    basicsCreateDto: BasicsCreateDto;
}

export interface BasicsEntityControllerDeleteRequest {
    id: string;
}

export interface BasicsEntityControllerFindOneRequest {
    id: string;
}

export interface BasicsEntityControllerUpdateRequest {
    id: string;
    basicsUpdateDto: BasicsUpdateDto;
}

/**
 * 
 */
export class BasicsApi extends runtime.BaseAPI {

    /**
     */
    async basicsEntityControllerCreateRaw(requestParameters: BasicsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.basicsCreateDto === null || requestParameters.basicsCreateDto === undefined) {
            throw new runtime.RequiredError('basicsCreateDto','Required parameter requestParameters.basicsCreateDto was null or undefined when calling basicsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/basics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BasicsCreateDtoToJSON(requestParameters.basicsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerCreate(requestParameters: BasicsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async basicsEntityControllerDeleteRaw(requestParameters: BasicsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling basicsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerDelete(requestParameters: BasicsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async basicsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async basicsEntityControllerFindOneRaw(requestParameters: BasicsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling basicsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerFindOne(requestParameters: BasicsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async basicsEntityControllerUpdateRaw(requestParameters: BasicsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling basicsEntityControllerUpdate.');
        }

        if (requestParameters.basicsUpdateDto === null || requestParameters.basicsUpdateDto === undefined) {
            throw new runtime.RequiredError('basicsUpdateDto','Required parameter requestParameters.basicsUpdateDto was null or undefined when calling basicsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BasicsUpdateDtoToJSON(requestParameters.basicsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerUpdate(requestParameters: BasicsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
