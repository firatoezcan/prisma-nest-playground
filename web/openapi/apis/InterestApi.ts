/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InterestCreateDto,
    InterestCreateDtoFromJSON,
    InterestCreateDtoToJSON,
    InterestUpdateDto,
    InterestUpdateDtoFromJSON,
    InterestUpdateDtoToJSON,
} from '../models';

export interface CreateInterestRequest {
    interestCreateDto: InterestCreateDto;
}

export interface DeleteInterestRequest {
    id: string;
}

export interface FindOneInterestRequest {
    id: string;
}

export interface UpdateInterestRequest {
    id: string;
    interestUpdateDto: InterestUpdateDto;
}

/**
 * 
 */
export class InterestApi extends runtime.BaseAPI {

    /**
     */
    async createInterestRaw(requestParameters: CreateInterestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.interestCreateDto === null || requestParameters.interestCreateDto === undefined) {
            throw new runtime.RequiredError('interestCreateDto','Required parameter requestParameters.interestCreateDto was null or undefined when calling createInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/interests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InterestCreateDtoToJSON(requestParameters.interestCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createInterest(requestParameters: CreateInterestRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createInterestRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteInterestRaw(requestParameters: DeleteInterestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteInterest(requestParameters: DeleteInterestRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteInterestRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findManyInterestRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findManyInterest(initOverrides?: RequestInit): Promise<void> {
        await this.findManyInterestRaw(initOverrides);
    }

    /**
     */
    async findOneInterestRaw(requestParameters: FindOneInterestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findOneInterest(requestParameters: FindOneInterestRequest, initOverrides?: RequestInit): Promise<void> {
        await this.findOneInterestRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateInterestRaw(requestParameters: UpdateInterestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInterest.');
        }

        if (requestParameters.interestUpdateDto === null || requestParameters.interestUpdateDto === undefined) {
            throw new runtime.RequiredError('interestUpdateDto','Required parameter requestParameters.interestUpdateDto was null or undefined when calling updateInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InterestUpdateDtoToJSON(requestParameters.interestUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateInterest(requestParameters: UpdateInterestRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateInterestRaw(requestParameters, initOverrides);
    }

}
