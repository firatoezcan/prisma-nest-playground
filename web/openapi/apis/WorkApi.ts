/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WorkCreateDto,
    WorkCreateDtoFromJSON,
    WorkCreateDtoToJSON,
    WorkUpdateDto,
    WorkUpdateDtoFromJSON,
    WorkUpdateDtoToJSON,
} from '../models';

export interface CreateWorkRequest {
    workCreateDto: WorkCreateDto;
}

export interface DeleteWorkRequest {
    id: string;
}

export interface FindOneWorkRequest {
    id: string;
}

export interface UpdateWorkRequest {
    id: string;
    workUpdateDto: WorkUpdateDto;
}

/**
 * 
 */
export class WorkApi extends runtime.BaseAPI {

    /**
     */
    async createWorkRaw(requestParameters: CreateWorkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workCreateDto === null || requestParameters.workCreateDto === undefined) {
            throw new runtime.RequiredError('workCreateDto','Required parameter requestParameters.workCreateDto was null or undefined when calling createWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/works`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkCreateDtoToJSON(requestParameters.workCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createWork(requestParameters: CreateWorkRequest, initOverrides?: RequestInit): Promise<void> {
        await this.createWorkRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteWorkRaw(requestParameters: DeleteWorkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteWork(requestParameters: DeleteWorkRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteWorkRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findManyWorkRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findManyWork(initOverrides?: RequestInit): Promise<void> {
        await this.findManyWorkRaw(initOverrides);
    }

    /**
     */
    async findOneWorkRaw(requestParameters: FindOneWorkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async findOneWork(requestParameters: FindOneWorkRequest, initOverrides?: RequestInit): Promise<void> {
        await this.findOneWorkRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateWorkRaw(requestParameters: UpdateWorkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWork.');
        }

        if (requestParameters.workUpdateDto === null || requestParameters.workUpdateDto === undefined) {
            throw new runtime.RequiredError('workUpdateDto','Required parameter requestParameters.workUpdateDto was null or undefined when calling updateWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkUpdateDtoToJSON(requestParameters.workUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateWork(requestParameters: UpdateWorkRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateWorkRaw(requestParameters, initOverrides);
    }

}
