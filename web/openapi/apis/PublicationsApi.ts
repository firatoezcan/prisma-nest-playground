/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PublicationsCreateDto,
    PublicationsCreateDtoFromJSON,
    PublicationsCreateDtoToJSON,
    PublicationsUpdateDto,
    PublicationsUpdateDtoFromJSON,
    PublicationsUpdateDtoToJSON,
} from '../models';

export interface PublicationsEntityControllerCreateRequest {
    publicationsCreateDto: PublicationsCreateDto;
}

export interface PublicationsEntityControllerDeleteRequest {
    id: string;
}

export interface PublicationsEntityControllerFindOneRequest {
    id: string;
}

export interface PublicationsEntityControllerUpdateRequest {
    id: string;
    publicationsUpdateDto: PublicationsUpdateDto;
}

/**
 * 
 */
export class PublicationsApi extends runtime.BaseAPI {

    /**
     */
    async publicationsEntityControllerCreateRaw(requestParameters: PublicationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.publicationsCreateDto === null || requestParameters.publicationsCreateDto === undefined) {
            throw new runtime.RequiredError('publicationsCreateDto','Required parameter requestParameters.publicationsCreateDto was null or undefined when calling publicationsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/publications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicationsCreateDtoToJSON(requestParameters.publicationsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerCreate(requestParameters: PublicationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async publicationsEntityControllerDeleteRaw(requestParameters: PublicationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling publicationsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerDelete(requestParameters: PublicationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async publicationsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async publicationsEntityControllerFindOneRaw(requestParameters: PublicationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling publicationsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerFindOne(requestParameters: PublicationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async publicationsEntityControllerUpdateRaw(requestParameters: PublicationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling publicationsEntityControllerUpdate.');
        }

        if (requestParameters.publicationsUpdateDto === null || requestParameters.publicationsUpdateDto === undefined) {
            throw new runtime.RequiredError('publicationsUpdateDto','Required parameter requestParameters.publicationsUpdateDto was null or undefined when calling publicationsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PublicationsUpdateDtoToJSON(requestParameters.publicationsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerUpdate(requestParameters: PublicationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
