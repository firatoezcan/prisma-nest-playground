/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UsersCreateDto,
    UsersCreateDtoFromJSON,
    UsersCreateDtoToJSON,
} from '../models';

export interface UsersEntityControllerCreateRequest {
    usersCreateDto: UsersCreateDto;
}

export interface UsersEntityControllerDeleteRequest {
    id: string;
}

export interface UsersEntityControllerFindOneRequest {
    id: string;
}

export interface UsersEntityControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async usersEntityControllerCreateRaw(requestParameters: UsersEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.usersCreateDto === null || requestParameters.usersCreateDto === undefined) {
            throw new runtime.RequiredError('usersCreateDto','Required parameter requestParameters.usersCreateDto was null or undefined when calling usersEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsersCreateDtoToJSON(requestParameters.usersCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerCreate(requestParameters: UsersEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersEntityControllerDeleteRaw(requestParameters: UsersEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerDelete(requestParameters: UsersEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async usersEntityControllerFindOneRaw(requestParameters: UsersEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerFindOne(requestParameters: UsersEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersEntityControllerUpdateRaw(requestParameters: UsersEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersEntityControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling usersEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerUpdate(requestParameters: UsersEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
