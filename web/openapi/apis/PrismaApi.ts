/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AwardsCreateDto,
    AwardsCreateDtoFromJSON,
    AwardsCreateDtoToJSON,
    AwardsUpdateDto,
    AwardsUpdateDtoFromJSON,
    AwardsUpdateDtoToJSON,
    BasicsCreateDto,
    BasicsCreateDtoFromJSON,
    BasicsCreateDtoToJSON,
    BasicsUpdateDto,
    BasicsUpdateDtoFromJSON,
    BasicsUpdateDtoToJSON,
    EducationsCreateDto,
    EducationsCreateDtoFromJSON,
    EducationsCreateDtoToJSON,
    EducationsUpdateDto,
    EducationsUpdateDtoFromJSON,
    EducationsUpdateDtoToJSON,
    InterestsCreateDto,
    InterestsCreateDtoFromJSON,
    InterestsCreateDtoToJSON,
    InterestsUpdateDto,
    InterestsUpdateDtoFromJSON,
    InterestsUpdateDtoToJSON,
    LanguagesCreateDto,
    LanguagesCreateDtoFromJSON,
    LanguagesCreateDtoToJSON,
    LanguagesUpdateDto,
    LanguagesUpdateDtoFromJSON,
    LanguagesUpdateDtoToJSON,
    LocationsCreateDto,
    LocationsCreateDtoFromJSON,
    LocationsCreateDtoToJSON,
    LocationsUpdateDto,
    LocationsUpdateDtoFromJSON,
    LocationsUpdateDtoToJSON,
    ProfilesCreateDto,
    ProfilesCreateDtoFromJSON,
    ProfilesCreateDtoToJSON,
    ProfilesUpdateDto,
    ProfilesUpdateDtoFromJSON,
    ProfilesUpdateDtoToJSON,
    ProjectsCreateDto,
    ProjectsCreateDtoFromJSON,
    ProjectsCreateDtoToJSON,
    ProjectsUpdateDto,
    ProjectsUpdateDtoFromJSON,
    ProjectsUpdateDtoToJSON,
    PublicationsCreateDto,
    PublicationsCreateDtoFromJSON,
    PublicationsCreateDtoToJSON,
    PublicationsUpdateDto,
    PublicationsUpdateDtoFromJSON,
    PublicationsUpdateDtoToJSON,
    ReferencesCreateDto,
    ReferencesCreateDtoFromJSON,
    ReferencesCreateDtoToJSON,
    ReferencesUpdateDto,
    ReferencesUpdateDtoFromJSON,
    ReferencesUpdateDtoToJSON,
    SkillkeywordsCreateDto,
    SkillkeywordsCreateDtoFromJSON,
    SkillkeywordsCreateDtoToJSON,
    SkillsCreateDto,
    SkillsCreateDtoFromJSON,
    SkillsCreateDtoToJSON,
    SkillsUpdateDto,
    SkillsUpdateDtoFromJSON,
    SkillsUpdateDtoToJSON,
    UsersCreateDto,
    UsersCreateDtoFromJSON,
    UsersCreateDtoToJSON,
    VolunteersCreateDto,
    VolunteersCreateDtoFromJSON,
    VolunteersCreateDtoToJSON,
    VolunteersUpdateDto,
    VolunteersUpdateDtoFromJSON,
    VolunteersUpdateDtoToJSON,
    WorksCreateDto,
    WorksCreateDtoFromJSON,
    WorksCreateDtoToJSON,
    WorksUpdateDto,
    WorksUpdateDtoFromJSON,
    WorksUpdateDtoToJSON,
} from '../models';

export interface AwardsEntityControllerCreateRequest {
    awardsCreateDto: AwardsCreateDto;
}

export interface AwardsEntityControllerDeleteRequest {
    id: string;
}

export interface AwardsEntityControllerFindOneRequest {
    id: string;
}

export interface AwardsEntityControllerUpdateRequest {
    id: string;
    awardsUpdateDto: AwardsUpdateDto;
}

export interface BasicsEntityControllerCreateRequest {
    basicsCreateDto: BasicsCreateDto;
}

export interface BasicsEntityControllerDeleteRequest {
    id: string;
}

export interface BasicsEntityControllerFindOneRequest {
    id: string;
}

export interface BasicsEntityControllerUpdateRequest {
    id: string;
    basicsUpdateDto: BasicsUpdateDto;
}

export interface EducationsEntityControllerCreateRequest {
    educationsCreateDto: EducationsCreateDto;
}

export interface EducationsEntityControllerDeleteRequest {
    id: string;
}

export interface EducationsEntityControllerFindOneRequest {
    id: string;
}

export interface EducationsEntityControllerUpdateRequest {
    id: string;
    educationsUpdateDto: EducationsUpdateDto;
}

export interface InterestsEntityControllerCreateRequest {
    interestsCreateDto: InterestsCreateDto;
}

export interface InterestsEntityControllerDeleteRequest {
    id: string;
}

export interface InterestsEntityControllerFindOneRequest {
    id: string;
}

export interface InterestsEntityControllerUpdateRequest {
    id: string;
    interestsUpdateDto: InterestsUpdateDto;
}

export interface LanguagesEntityControllerCreateRequest {
    languagesCreateDto: LanguagesCreateDto;
}

export interface LanguagesEntityControllerDeleteRequest {
    id: string;
}

export interface LanguagesEntityControllerFindOneRequest {
    id: string;
}

export interface LanguagesEntityControllerUpdateRequest {
    id: string;
    languagesUpdateDto: LanguagesUpdateDto;
}

export interface LocationsEntityControllerCreateRequest {
    locationsCreateDto: LocationsCreateDto;
}

export interface LocationsEntityControllerDeleteRequest {
    id: string;
}

export interface LocationsEntityControllerFindOneRequest {
    id: string;
}

export interface LocationsEntityControllerUpdateRequest {
    id: string;
    locationsUpdateDto: LocationsUpdateDto;
}

export interface ProfilesEntityControllerCreateRequest {
    profilesCreateDto: ProfilesCreateDto;
}

export interface ProfilesEntityControllerDeleteRequest {
    id: string;
}

export interface ProfilesEntityControllerFindOneRequest {
    id: string;
}

export interface ProfilesEntityControllerUpdateRequest {
    id: string;
    profilesUpdateDto: ProfilesUpdateDto;
}

export interface ProjectsEntityControllerCreateRequest {
    projectsCreateDto: ProjectsCreateDto;
}

export interface ProjectsEntityControllerDeleteRequest {
    id: string;
}

export interface ProjectsEntityControllerFindOneRequest {
    id: string;
}

export interface ProjectsEntityControllerUpdateRequest {
    id: string;
    projectsUpdateDto: ProjectsUpdateDto;
}

export interface PublicationsEntityControllerCreateRequest {
    publicationsCreateDto: PublicationsCreateDto;
}

export interface PublicationsEntityControllerDeleteRequest {
    id: string;
}

export interface PublicationsEntityControllerFindOneRequest {
    id: string;
}

export interface PublicationsEntityControllerUpdateRequest {
    id: string;
    publicationsUpdateDto: PublicationsUpdateDto;
}

export interface ReferencesEntityControllerCreateRequest {
    referencesCreateDto: ReferencesCreateDto;
}

export interface ReferencesEntityControllerDeleteRequest {
    id: string;
}

export interface ReferencesEntityControllerFindOneRequest {
    id: string;
}

export interface ReferencesEntityControllerUpdateRequest {
    id: string;
    referencesUpdateDto: ReferencesUpdateDto;
}

export interface SkillkeywordsEntityControllerCreateRequest {
    skillkeywordsCreateDto: SkillkeywordsCreateDto;
}

export interface SkillkeywordsEntityControllerDeleteRequest {
    id: string;
}

export interface SkillkeywordsEntityControllerFindOneRequest {
    id: string;
}

export interface SkillkeywordsEntityControllerUpdateRequest {
    id: string;
    body: object;
}

export interface SkillsEntityControllerCreateRequest {
    skillsCreateDto: SkillsCreateDto;
}

export interface SkillsEntityControllerDeleteRequest {
    id: string;
}

export interface SkillsEntityControllerFindOneRequest {
    id: string;
}

export interface SkillsEntityControllerUpdateRequest {
    id: string;
    skillsUpdateDto: SkillsUpdateDto;
}

export interface UsersEntityControllerCreateRequest {
    usersCreateDto: UsersCreateDto;
}

export interface UsersEntityControllerDeleteRequest {
    id: string;
}

export interface UsersEntityControllerFindOneRequest {
    id: string;
}

export interface UsersEntityControllerUpdateRequest {
    id: string;
    body: object;
}

export interface VolunteersEntityControllerCreateRequest {
    volunteersCreateDto: VolunteersCreateDto;
}

export interface VolunteersEntityControllerDeleteRequest {
    id: string;
}

export interface VolunteersEntityControllerFindOneRequest {
    id: string;
}

export interface VolunteersEntityControllerUpdateRequest {
    id: string;
    volunteersUpdateDto: VolunteersUpdateDto;
}

export interface WorksEntityControllerCreateRequest {
    worksCreateDto: WorksCreateDto;
}

export interface WorksEntityControllerDeleteRequest {
    id: string;
}

export interface WorksEntityControllerFindOneRequest {
    id: string;
}

export interface WorksEntityControllerUpdateRequest {
    id: string;
    worksUpdateDto: WorksUpdateDto;
}

/**
 * 
 */
export class PrismaApi extends runtime.BaseAPI {

    /**
     */
    async awardsEntityControllerCreateRaw(requestParameters: AwardsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.awardsCreateDto === null || requestParameters.awardsCreateDto === undefined) {
            throw new runtime.RequiredError('awardsCreateDto','Required parameter requestParameters.awardsCreateDto was null or undefined when calling awardsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/awards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardsCreateDtoToJSON(requestParameters.awardsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerCreate(requestParameters: AwardsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awardsEntityControllerDeleteRaw(requestParameters: AwardsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling awardsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerDelete(requestParameters: AwardsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awardsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async awardsEntityControllerFindOneRaw(requestParameters: AwardsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling awardsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerFindOne(requestParameters: AwardsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async awardsEntityControllerUpdateRaw(requestParameters: AwardsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling awardsEntityControllerUpdate.');
        }

        if (requestParameters.awardsUpdateDto === null || requestParameters.awardsUpdateDto === undefined) {
            throw new runtime.RequiredError('awardsUpdateDto','Required parameter requestParameters.awardsUpdateDto was null or undefined when calling awardsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AwardsUpdateDtoToJSON(requestParameters.awardsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async awardsEntityControllerUpdate(requestParameters: AwardsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.awardsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async basicsEntityControllerCreateRaw(requestParameters: BasicsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.basicsCreateDto === null || requestParameters.basicsCreateDto === undefined) {
            throw new runtime.RequiredError('basicsCreateDto','Required parameter requestParameters.basicsCreateDto was null or undefined when calling basicsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/basics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BasicsCreateDtoToJSON(requestParameters.basicsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerCreate(requestParameters: BasicsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async basicsEntityControllerDeleteRaw(requestParameters: BasicsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling basicsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerDelete(requestParameters: BasicsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async basicsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async basicsEntityControllerFindOneRaw(requestParameters: BasicsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling basicsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerFindOne(requestParameters: BasicsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async basicsEntityControllerUpdateRaw(requestParameters: BasicsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling basicsEntityControllerUpdate.');
        }

        if (requestParameters.basicsUpdateDto === null || requestParameters.basicsUpdateDto === undefined) {
            throw new runtime.RequiredError('basicsUpdateDto','Required parameter requestParameters.basicsUpdateDto was null or undefined when calling basicsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BasicsUpdateDtoToJSON(requestParameters.basicsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async basicsEntityControllerUpdate(requestParameters: BasicsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.basicsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async educationsEntityControllerCreateRaw(requestParameters: EducationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.educationsCreateDto === null || requestParameters.educationsCreateDto === undefined) {
            throw new runtime.RequiredError('educationsCreateDto','Required parameter requestParameters.educationsCreateDto was null or undefined when calling educationsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EducationsCreateDtoToJSON(requestParameters.educationsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerCreate(requestParameters: EducationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async educationsEntityControllerDeleteRaw(requestParameters: EducationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling educationsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerDelete(requestParameters: EducationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async educationsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async educationsEntityControllerFindOneRaw(requestParameters: EducationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling educationsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerFindOne(requestParameters: EducationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async educationsEntityControllerUpdateRaw(requestParameters: EducationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling educationsEntityControllerUpdate.');
        }

        if (requestParameters.educationsUpdateDto === null || requestParameters.educationsUpdateDto === undefined) {
            throw new runtime.RequiredError('educationsUpdateDto','Required parameter requestParameters.educationsUpdateDto was null or undefined when calling educationsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EducationsUpdateDtoToJSON(requestParameters.educationsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerUpdate(requestParameters: EducationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async interestsEntityControllerCreateRaw(requestParameters: InterestsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.interestsCreateDto === null || requestParameters.interestsCreateDto === undefined) {
            throw new runtime.RequiredError('interestsCreateDto','Required parameter requestParameters.interestsCreateDto was null or undefined when calling interestsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/interests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InterestsCreateDtoToJSON(requestParameters.interestsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async interestsEntityControllerCreate(requestParameters: InterestsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.interestsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async interestsEntityControllerDeleteRaw(requestParameters: InterestsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling interestsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async interestsEntityControllerDelete(requestParameters: InterestsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.interestsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async interestsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async interestsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.interestsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async interestsEntityControllerFindOneRaw(requestParameters: InterestsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling interestsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async interestsEntityControllerFindOne(requestParameters: InterestsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.interestsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async interestsEntityControllerUpdateRaw(requestParameters: InterestsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling interestsEntityControllerUpdate.');
        }

        if (requestParameters.interestsUpdateDto === null || requestParameters.interestsUpdateDto === undefined) {
            throw new runtime.RequiredError('interestsUpdateDto','Required parameter requestParameters.interestsUpdateDto was null or undefined when calling interestsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InterestsUpdateDtoToJSON(requestParameters.interestsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async interestsEntityControllerUpdate(requestParameters: InterestsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.interestsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesEntityControllerCreateRaw(requestParameters: LanguagesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.languagesCreateDto === null || requestParameters.languagesCreateDto === undefined) {
            throw new runtime.RequiredError('languagesCreateDto','Required parameter requestParameters.languagesCreateDto was null or undefined when calling languagesEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/languages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LanguagesCreateDtoToJSON(requestParameters.languagesCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerCreate(requestParameters: LanguagesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesEntityControllerDeleteRaw(requestParameters: LanguagesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerDelete(requestParameters: LanguagesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async languagesEntityControllerFindOneRaw(requestParameters: LanguagesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerFindOne(requestParameters: LanguagesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async languagesEntityControllerUpdateRaw(requestParameters: LanguagesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling languagesEntityControllerUpdate.');
        }

        if (requestParameters.languagesUpdateDto === null || requestParameters.languagesUpdateDto === undefined) {
            throw new runtime.RequiredError('languagesUpdateDto','Required parameter requestParameters.languagesUpdateDto was null or undefined when calling languagesEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LanguagesUpdateDtoToJSON(requestParameters.languagesUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async languagesEntityControllerUpdate(requestParameters: LanguagesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.languagesEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationsEntityControllerCreateRaw(requestParameters: LocationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.locationsCreateDto === null || requestParameters.locationsCreateDto === undefined) {
            throw new runtime.RequiredError('locationsCreateDto','Required parameter requestParameters.locationsCreateDto was null or undefined when calling locationsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationsCreateDtoToJSON(requestParameters.locationsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerCreate(requestParameters: LocationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationsEntityControllerDeleteRaw(requestParameters: LocationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling locationsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerDelete(requestParameters: LocationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async locationsEntityControllerFindOneRaw(requestParameters: LocationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling locationsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerFindOne(requestParameters: LocationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async locationsEntityControllerUpdateRaw(requestParameters: LocationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling locationsEntityControllerUpdate.');
        }

        if (requestParameters.locationsUpdateDto === null || requestParameters.locationsUpdateDto === undefined) {
            throw new runtime.RequiredError('locationsUpdateDto','Required parameter requestParameters.locationsUpdateDto was null or undefined when calling locationsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LocationsUpdateDtoToJSON(requestParameters.locationsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async locationsEntityControllerUpdate(requestParameters: LocationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.locationsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async profilesEntityControllerCreateRaw(requestParameters: ProfilesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.profilesCreateDto === null || requestParameters.profilesCreateDto === undefined) {
            throw new runtime.RequiredError('profilesCreateDto','Required parameter requestParameters.profilesCreateDto was null or undefined when calling profilesEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfilesCreateDtoToJSON(requestParameters.profilesCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerCreate(requestParameters: ProfilesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async profilesEntityControllerDeleteRaw(requestParameters: ProfilesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling profilesEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerDelete(requestParameters: ProfilesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async profilesEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async profilesEntityControllerFindOneRaw(requestParameters: ProfilesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling profilesEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerFindOne(requestParameters: ProfilesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async profilesEntityControllerUpdateRaw(requestParameters: ProfilesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling profilesEntityControllerUpdate.');
        }

        if (requestParameters.profilesUpdateDto === null || requestParameters.profilesUpdateDto === undefined) {
            throw new runtime.RequiredError('profilesUpdateDto','Required parameter requestParameters.profilesUpdateDto was null or undefined when calling profilesEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProfilesUpdateDtoToJSON(requestParameters.profilesUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async profilesEntityControllerUpdate(requestParameters: ProfilesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.profilesEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectsEntityControllerCreateRaw(requestParameters: ProjectsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectsCreateDto === null || requestParameters.projectsCreateDto === undefined) {
            throw new runtime.RequiredError('projectsCreateDto','Required parameter requestParameters.projectsCreateDto was null or undefined when calling projectsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsCreateDtoToJSON(requestParameters.projectsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerCreate(requestParameters: ProjectsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectsEntityControllerDeleteRaw(requestParameters: ProjectsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerDelete(requestParameters: ProjectsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async projectsEntityControllerFindOneRaw(requestParameters: ProjectsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerFindOne(requestParameters: ProjectsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async projectsEntityControllerUpdateRaw(requestParameters: ProjectsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling projectsEntityControllerUpdate.');
        }

        if (requestParameters.projectsUpdateDto === null || requestParameters.projectsUpdateDto === undefined) {
            throw new runtime.RequiredError('projectsUpdateDto','Required parameter requestParameters.projectsUpdateDto was null or undefined when calling projectsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsUpdateDtoToJSON(requestParameters.projectsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsEntityControllerUpdate(requestParameters: ProjectsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async publicationsEntityControllerCreateRaw(requestParameters: PublicationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.publicationsCreateDto === null || requestParameters.publicationsCreateDto === undefined) {
            throw new runtime.RequiredError('publicationsCreateDto','Required parameter requestParameters.publicationsCreateDto was null or undefined when calling publicationsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/publications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicationsCreateDtoToJSON(requestParameters.publicationsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerCreate(requestParameters: PublicationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async publicationsEntityControllerDeleteRaw(requestParameters: PublicationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling publicationsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerDelete(requestParameters: PublicationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async publicationsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async publicationsEntityControllerFindOneRaw(requestParameters: PublicationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling publicationsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerFindOne(requestParameters: PublicationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async publicationsEntityControllerUpdateRaw(requestParameters: PublicationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling publicationsEntityControllerUpdate.');
        }

        if (requestParameters.publicationsUpdateDto === null || requestParameters.publicationsUpdateDto === undefined) {
            throw new runtime.RequiredError('publicationsUpdateDto','Required parameter requestParameters.publicationsUpdateDto was null or undefined when calling publicationsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PublicationsUpdateDtoToJSON(requestParameters.publicationsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicationsEntityControllerUpdate(requestParameters: PublicationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.publicationsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async referencesEntityControllerCreateRaw(requestParameters: ReferencesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.referencesCreateDto === null || requestParameters.referencesCreateDto === undefined) {
            throw new runtime.RequiredError('referencesCreateDto','Required parameter requestParameters.referencesCreateDto was null or undefined when calling referencesEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/references`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReferencesCreateDtoToJSON(requestParameters.referencesCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerCreate(requestParameters: ReferencesEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async referencesEntityControllerDeleteRaw(requestParameters: ReferencesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling referencesEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerDelete(requestParameters: ReferencesEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async referencesEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async referencesEntityControllerFindOneRaw(requestParameters: ReferencesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling referencesEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerFindOne(requestParameters: ReferencesEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async referencesEntityControllerUpdateRaw(requestParameters: ReferencesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling referencesEntityControllerUpdate.');
        }

        if (requestParameters.referencesUpdateDto === null || requestParameters.referencesUpdateDto === undefined) {
            throw new runtime.RequiredError('referencesUpdateDto','Required parameter requestParameters.referencesUpdateDto was null or undefined when calling referencesEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReferencesUpdateDtoToJSON(requestParameters.referencesUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async referencesEntityControllerUpdate(requestParameters: ReferencesEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.referencesEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerCreateRaw(requestParameters: SkillkeywordsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.skillkeywordsCreateDto === null || requestParameters.skillkeywordsCreateDto === undefined) {
            throw new runtime.RequiredError('skillkeywordsCreateDto','Required parameter requestParameters.skillkeywordsCreateDto was null or undefined when calling skillkeywordsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skillkeywords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillkeywordsCreateDtoToJSON(requestParameters.skillkeywordsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerCreate(requestParameters: SkillkeywordsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerDeleteRaw(requestParameters: SkillkeywordsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillkeywordsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillkeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerDelete(requestParameters: SkillkeywordsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillkeywords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerFindOneRaw(requestParameters: SkillkeywordsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillkeywordsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillkeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerFindOne(requestParameters: SkillkeywordsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillkeywordsEntityControllerUpdateRaw(requestParameters: SkillkeywordsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillkeywordsEntityControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling skillkeywordsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skillkeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillkeywordsEntityControllerUpdate(requestParameters: SkillkeywordsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillkeywordsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillsEntityControllerCreateRaw(requestParameters: SkillsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.skillsCreateDto === null || requestParameters.skillsCreateDto === undefined) {
            throw new runtime.RequiredError('skillsCreateDto','Required parameter requestParameters.skillsCreateDto was null or undefined when calling skillsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillsCreateDtoToJSON(requestParameters.skillsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillsEntityControllerCreate(requestParameters: SkillsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillsEntityControllerDeleteRaw(requestParameters: SkillsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillsEntityControllerDelete(requestParameters: SkillsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.skillsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async skillsEntityControllerFindOneRaw(requestParameters: SkillsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillsEntityControllerFindOne(requestParameters: SkillsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async skillsEntityControllerUpdateRaw(requestParameters: SkillsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling skillsEntityControllerUpdate.');
        }

        if (requestParameters.skillsUpdateDto === null || requestParameters.skillsUpdateDto === undefined) {
            throw new runtime.RequiredError('skillsUpdateDto','Required parameter requestParameters.skillsUpdateDto was null or undefined when calling skillsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SkillsUpdateDtoToJSON(requestParameters.skillsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async skillsEntityControllerUpdate(requestParameters: SkillsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.skillsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersEntityControllerCreateRaw(requestParameters: UsersEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.usersCreateDto === null || requestParameters.usersCreateDto === undefined) {
            throw new runtime.RequiredError('usersCreateDto','Required parameter requestParameters.usersCreateDto was null or undefined when calling usersEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsersCreateDtoToJSON(requestParameters.usersCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerCreate(requestParameters: UsersEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersEntityControllerDeleteRaw(requestParameters: UsersEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerDelete(requestParameters: UsersEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async usersEntityControllerFindOneRaw(requestParameters: UsersEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerFindOne(requestParameters: UsersEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async usersEntityControllerUpdateRaw(requestParameters: UsersEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling usersEntityControllerUpdate.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling usersEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async usersEntityControllerUpdate(requestParameters: UsersEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.usersEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async volunteersEntityControllerCreateRaw(requestParameters: VolunteersEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.volunteersCreateDto === null || requestParameters.volunteersCreateDto === undefined) {
            throw new runtime.RequiredError('volunteersCreateDto','Required parameter requestParameters.volunteersCreateDto was null or undefined when calling volunteersEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volunteers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteersCreateDtoToJSON(requestParameters.volunteersCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerCreate(requestParameters: VolunteersEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async volunteersEntityControllerDeleteRaw(requestParameters: VolunteersEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling volunteersEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerDelete(requestParameters: VolunteersEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async volunteersEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async volunteersEntityControllerFindOneRaw(requestParameters: VolunteersEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling volunteersEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerFindOne(requestParameters: VolunteersEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async volunteersEntityControllerUpdateRaw(requestParameters: VolunteersEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling volunteersEntityControllerUpdate.');
        }

        if (requestParameters.volunteersUpdateDto === null || requestParameters.volunteersUpdateDto === undefined) {
            throw new runtime.RequiredError('volunteersUpdateDto','Required parameter requestParameters.volunteersUpdateDto was null or undefined when calling volunteersEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteersUpdateDtoToJSON(requestParameters.volunteersUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async volunteersEntityControllerUpdate(requestParameters: VolunteersEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.volunteersEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async worksEntityControllerCreateRaw(requestParameters: WorksEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.worksCreateDto === null || requestParameters.worksCreateDto === undefined) {
            throw new runtime.RequiredError('worksCreateDto','Required parameter requestParameters.worksCreateDto was null or undefined when calling worksEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/works`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorksCreateDtoToJSON(requestParameters.worksCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerCreate(requestParameters: WorksEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async worksEntityControllerDeleteRaw(requestParameters: WorksEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling worksEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerDelete(requestParameters: WorksEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async worksEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async worksEntityControllerFindOneRaw(requestParameters: WorksEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling worksEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerFindOne(requestParameters: WorksEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async worksEntityControllerUpdateRaw(requestParameters: WorksEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling worksEntityControllerUpdate.');
        }

        if (requestParameters.worksUpdateDto === null || requestParameters.worksUpdateDto === undefined) {
            throw new runtime.RequiredError('worksUpdateDto','Required parameter requestParameters.worksUpdateDto was null or undefined when calling worksEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorksUpdateDtoToJSON(requestParameters.worksUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async worksEntityControllerUpdate(requestParameters: WorksEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.worksEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
