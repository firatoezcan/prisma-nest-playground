/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AwardCreateDto,
    AwardCreateDtoFromJSON,
    AwardCreateDtoToJSON,
    AwardEntity,
    AwardEntityFromJSON,
    AwardEntityToJSON,
    AwardUpdateDto,
    AwardUpdateDtoFromJSON,
    AwardUpdateDtoToJSON,
    BasicCreateDto,
    BasicCreateDtoFromJSON,
    BasicCreateDtoToJSON,
    BasicEntity,
    BasicEntityFromJSON,
    BasicEntityToJSON,
    BasicUpdateDto,
    BasicUpdateDtoFromJSON,
    BasicUpdateDtoToJSON,
    EducationCreateDto,
    EducationCreateDtoFromJSON,
    EducationCreateDtoToJSON,
    EducationEntity,
    EducationEntityFromJSON,
    EducationEntityToJSON,
    EducationUpdateDto,
    EducationUpdateDtoFromJSON,
    EducationUpdateDtoToJSON,
    InterestCreateDto,
    InterestCreateDtoFromJSON,
    InterestCreateDtoToJSON,
    InterestEntity,
    InterestEntityFromJSON,
    InterestEntityToJSON,
    InterestUpdateDto,
    InterestUpdateDtoFromJSON,
    InterestUpdateDtoToJSON,
    LanguageCreateDto,
    LanguageCreateDtoFromJSON,
    LanguageCreateDtoToJSON,
    LanguageEntity,
    LanguageEntityFromJSON,
    LanguageEntityToJSON,
    LanguageUpdateDto,
    LanguageUpdateDtoFromJSON,
    LanguageUpdateDtoToJSON,
    LocationCreateDto,
    LocationCreateDtoFromJSON,
    LocationCreateDtoToJSON,
    LocationEntity,
    LocationEntityFromJSON,
    LocationEntityToJSON,
    LocationUpdateDto,
    LocationUpdateDtoFromJSON,
    LocationUpdateDtoToJSON,
    ProfileCreateDto,
    ProfileCreateDtoFromJSON,
    ProfileCreateDtoToJSON,
    ProfileEntity,
    ProfileEntityFromJSON,
    ProfileEntityToJSON,
    ProfileUpdateDto,
    ProfileUpdateDtoFromJSON,
    ProfileUpdateDtoToJSON,
    ProjectCreateDto,
    ProjectCreateDtoFromJSON,
    ProjectCreateDtoToJSON,
    ProjectEntity,
    ProjectEntityFromJSON,
    ProjectEntityToJSON,
    ProjectUpdateDto,
    ProjectUpdateDtoFromJSON,
    ProjectUpdateDtoToJSON,
    PublicationCreateDto,
    PublicationCreateDtoFromJSON,
    PublicationCreateDtoToJSON,
    PublicationEntity,
    PublicationEntityFromJSON,
    PublicationEntityToJSON,
    PublicationUpdateDto,
    PublicationUpdateDtoFromJSON,
    PublicationUpdateDtoToJSON,
    ReferenceCreateDto,
    ReferenceCreateDtoFromJSON,
    ReferenceCreateDtoToJSON,
    ReferenceEntity,
    ReferenceEntityFromJSON,
    ReferenceEntityToJSON,
    ReferenceUpdateDto,
    ReferenceUpdateDtoFromJSON,
    ReferenceUpdateDtoToJSON,
    SkillCreateDto,
    SkillCreateDtoFromJSON,
    SkillCreateDtoToJSON,
    SkillEntity,
    SkillEntityFromJSON,
    SkillEntityToJSON,
    SkillKeywordCreateDto,
    SkillKeywordCreateDtoFromJSON,
    SkillKeywordCreateDtoToJSON,
    SkillKeywordEntity,
    SkillKeywordEntityFromJSON,
    SkillKeywordEntityToJSON,
    SkillUpdateDto,
    SkillUpdateDtoFromJSON,
    SkillUpdateDtoToJSON,
    UserCreateDto,
    UserCreateDtoFromJSON,
    UserCreateDtoToJSON,
    UserEntity,
    UserEntityFromJSON,
    UserEntityToJSON,
    VolunteerCreateDto,
    VolunteerCreateDtoFromJSON,
    VolunteerCreateDtoToJSON,
    VolunteerEntity,
    VolunteerEntityFromJSON,
    VolunteerEntityToJSON,
    VolunteerUpdateDto,
    VolunteerUpdateDtoFromJSON,
    VolunteerUpdateDtoToJSON,
    WorkCreateDto,
    WorkCreateDtoFromJSON,
    WorkCreateDtoToJSON,
    WorkEntity,
    WorkEntityFromJSON,
    WorkEntityToJSON,
    WorkUpdateDto,
    WorkUpdateDtoFromJSON,
    WorkUpdateDtoToJSON,
} from '../models';

export interface CreateAwardRequest {
    awardCreateDto: AwardCreateDto;
}

export interface CreateBasicRequest {
    basicCreateDto: BasicCreateDto;
}

export interface CreateEducationRequest {
    educationCreateDto: EducationCreateDto;
}

export interface CreateInterestRequest {
    interestCreateDto: InterestCreateDto;
}

export interface CreateLanguageRequest {
    languageCreateDto: LanguageCreateDto;
}

export interface CreateLocationRequest {
    locationCreateDto: LocationCreateDto;
}

export interface CreateProfileRequest {
    profileCreateDto: ProfileCreateDto;
}

export interface CreateProjectRequest {
    projectCreateDto: ProjectCreateDto;
}

export interface CreatePublicationRequest {
    publicationCreateDto: PublicationCreateDto;
}

export interface CreateReferenceRequest {
    referenceCreateDto: ReferenceCreateDto;
}

export interface CreateSkillRequest {
    skillCreateDto: SkillCreateDto;
}

export interface CreateSkillKeywordRequest {
    skillKeywordCreateDto: SkillKeywordCreateDto;
}

export interface CreateUserRequest {
    userCreateDto: UserCreateDto;
}

export interface CreateVolunteerRequest {
    volunteerCreateDto: VolunteerCreateDto;
}

export interface CreateWorkRequest {
    workCreateDto: WorkCreateDto;
}

export interface DeleteAwardRequest {
    id: string;
}

export interface DeleteBasicRequest {
    id: string;
}

export interface DeleteEducationRequest {
    id: string;
}

export interface DeleteInterestRequest {
    id: string;
}

export interface DeleteLanguageRequest {
    id: string;
}

export interface DeleteLocationRequest {
    id: string;
}

export interface DeleteProfileRequest {
    id: string;
}

export interface DeleteProjectRequest {
    id: string;
}

export interface DeletePublicationRequest {
    id: string;
}

export interface DeleteReferenceRequest {
    id: string;
}

export interface DeleteSkillRequest {
    id: string;
}

export interface DeleteSkillKeywordRequest {
    id: string;
}

export interface DeleteUserRequest {
    id: string;
}

export interface DeleteVolunteerRequest {
    id: string;
}

export interface DeleteWorkRequest {
    id: string;
}

export interface FindOneAwardRequest {
    id: string;
}

export interface FindOneBasicRequest {
    id: string;
}

export interface FindOneEducationRequest {
    id: string;
}

export interface FindOneInterestRequest {
    id: string;
}

export interface FindOneLanguageRequest {
    id: string;
}

export interface FindOneLocationRequest {
    id: string;
}

export interface FindOneProfileRequest {
    id: string;
}

export interface FindOneProjectRequest {
    id: string;
}

export interface FindOnePublicationRequest {
    id: string;
}

export interface FindOneReferenceRequest {
    id: string;
}

export interface FindOneSkillRequest {
    id: string;
}

export interface FindOneSkillKeywordRequest {
    id: string;
}

export interface FindOneUserRequest {
    id: string;
}

export interface FindOneVolunteerRequest {
    id: string;
}

export interface FindOneWorkRequest {
    id: string;
}

export interface UpdateAwardRequest {
    id: string;
    awardUpdateDto: AwardUpdateDto;
}

export interface UpdateBasicRequest {
    id: string;
    basicUpdateDto: BasicUpdateDto;
}

export interface UpdateEducationRequest {
    id: string;
    educationUpdateDto: EducationUpdateDto;
}

export interface UpdateInterestRequest {
    id: string;
    interestUpdateDto: InterestUpdateDto;
}

export interface UpdateLanguageRequest {
    id: string;
    languageUpdateDto: LanguageUpdateDto;
}

export interface UpdateLocationRequest {
    id: string;
    locationUpdateDto: LocationUpdateDto;
}

export interface UpdateProfileRequest {
    id: string;
    profileUpdateDto: ProfileUpdateDto;
}

export interface UpdateProjectRequest {
    id: string;
    projectUpdateDto: ProjectUpdateDto;
}

export interface UpdatePublicationRequest {
    id: string;
    publicationUpdateDto: PublicationUpdateDto;
}

export interface UpdateReferenceRequest {
    id: string;
    referenceUpdateDto: ReferenceUpdateDto;
}

export interface UpdateSkillRequest {
    id: string;
    skillUpdateDto: SkillUpdateDto;
}

export interface UpdateSkillKeywordRequest {
    id: string;
    body: object;
}

export interface UpdateUserRequest {
    id: string;
    body: object;
}

export interface UpdateVolunteerRequest {
    id: string;
    volunteerUpdateDto: VolunteerUpdateDto;
}

export interface UpdateWorkRequest {
    id: string;
    workUpdateDto: WorkUpdateDto;
}

/**
 * 
 */
export class PrismaApi extends runtime.BaseAPI {

    /**
     */
    async createAwardRaw(requestParameters: CreateAwardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AwardEntity>> {
        if (requestParameters.awardCreateDto === null || requestParameters.awardCreateDto === undefined) {
            throw new runtime.RequiredError('awardCreateDto','Required parameter requestParameters.awardCreateDto was null or undefined when calling createAward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/awards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AwardCreateDtoToJSON(requestParameters.awardCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardEntityFromJSON(jsonValue));
    }

    /**
     */
    async createAward(requestParameters: CreateAwardRequest, initOverrides?: RequestInit): Promise<AwardEntity> {
        const response = await this.createAwardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createBasicRaw(requestParameters: CreateBasicRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BasicEntity>> {
        if (requestParameters.basicCreateDto === null || requestParameters.basicCreateDto === undefined) {
            throw new runtime.RequiredError('basicCreateDto','Required parameter requestParameters.basicCreateDto was null or undefined when calling createBasic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/basics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BasicCreateDtoToJSON(requestParameters.basicCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicEntityFromJSON(jsonValue));
    }

    /**
     */
    async createBasic(requestParameters: CreateBasicRequest, initOverrides?: RequestInit): Promise<BasicEntity> {
        const response = await this.createBasicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createEducationRaw(requestParameters: CreateEducationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EducationEntity>> {
        if (requestParameters.educationCreateDto === null || requestParameters.educationCreateDto === undefined) {
            throw new runtime.RequiredError('educationCreateDto','Required parameter requestParameters.educationCreateDto was null or undefined when calling createEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EducationCreateDtoToJSON(requestParameters.educationCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationEntityFromJSON(jsonValue));
    }

    /**
     */
    async createEducation(requestParameters: CreateEducationRequest, initOverrides?: RequestInit): Promise<EducationEntity> {
        const response = await this.createEducationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createInterestRaw(requestParameters: CreateInterestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InterestEntity>> {
        if (requestParameters.interestCreateDto === null || requestParameters.interestCreateDto === undefined) {
            throw new runtime.RequiredError('interestCreateDto','Required parameter requestParameters.interestCreateDto was null or undefined when calling createInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/interests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InterestCreateDtoToJSON(requestParameters.interestCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InterestEntityFromJSON(jsonValue));
    }

    /**
     */
    async createInterest(requestParameters: CreateInterestRequest, initOverrides?: RequestInit): Promise<InterestEntity> {
        const response = await this.createInterestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createLanguageRaw(requestParameters: CreateLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LanguageEntity>> {
        if (requestParameters.languageCreateDto === null || requestParameters.languageCreateDto === undefined) {
            throw new runtime.RequiredError('languageCreateDto','Required parameter requestParameters.languageCreateDto was null or undefined when calling createLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/languages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageCreateDtoToJSON(requestParameters.languageCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageEntityFromJSON(jsonValue));
    }

    /**
     */
    async createLanguage(requestParameters: CreateLanguageRequest, initOverrides?: RequestInit): Promise<LanguageEntity> {
        const response = await this.createLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createLocationRaw(requestParameters: CreateLocationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationEntity>> {
        if (requestParameters.locationCreateDto === null || requestParameters.locationCreateDto === undefined) {
            throw new runtime.RequiredError('locationCreateDto','Required parameter requestParameters.locationCreateDto was null or undefined when calling createLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationCreateDtoToJSON(requestParameters.locationCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEntityFromJSON(jsonValue));
    }

    /**
     */
    async createLocation(requestParameters: CreateLocationRequest, initOverrides?: RequestInit): Promise<LocationEntity> {
        const response = await this.createLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createProfileRaw(requestParameters: CreateProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProfileEntity>> {
        if (requestParameters.profileCreateDto === null || requestParameters.profileCreateDto === undefined) {
            throw new runtime.RequiredError('profileCreateDto','Required parameter requestParameters.profileCreateDto was null or undefined when calling createProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCreateDtoToJSON(requestParameters.profileCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileEntityFromJSON(jsonValue));
    }

    /**
     */
    async createProfile(requestParameters: CreateProfileRequest, initOverrides?: RequestInit): Promise<ProfileEntity> {
        const response = await this.createProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEntity>> {
        if (requestParameters.projectCreateDto === null || requestParameters.projectCreateDto === undefined) {
            throw new runtime.RequiredError('projectCreateDto','Required parameter requestParameters.projectCreateDto was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectCreateDtoToJSON(requestParameters.projectCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectEntityFromJSON(jsonValue));
    }

    /**
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit): Promise<ProjectEntity> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPublicationRaw(requestParameters: CreatePublicationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PublicationEntity>> {
        if (requestParameters.publicationCreateDto === null || requestParameters.publicationCreateDto === undefined) {
            throw new runtime.RequiredError('publicationCreateDto','Required parameter requestParameters.publicationCreateDto was null or undefined when calling createPublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/publications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicationCreateDtoToJSON(requestParameters.publicationCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicationEntityFromJSON(jsonValue));
    }

    /**
     */
    async createPublication(requestParameters: CreatePublicationRequest, initOverrides?: RequestInit): Promise<PublicationEntity> {
        const response = await this.createPublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createReferenceRaw(requestParameters: CreateReferenceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReferenceEntity>> {
        if (requestParameters.referenceCreateDto === null || requestParameters.referenceCreateDto === undefined) {
            throw new runtime.RequiredError('referenceCreateDto','Required parameter requestParameters.referenceCreateDto was null or undefined when calling createReference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/references`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceCreateDtoToJSON(requestParameters.referenceCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceEntityFromJSON(jsonValue));
    }

    /**
     */
    async createReference(requestParameters: CreateReferenceRequest, initOverrides?: RequestInit): Promise<ReferenceEntity> {
        const response = await this.createReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSkillRaw(requestParameters: CreateSkillRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillEntity>> {
        if (requestParameters.skillCreateDto === null || requestParameters.skillCreateDto === undefined) {
            throw new runtime.RequiredError('skillCreateDto','Required parameter requestParameters.skillCreateDto was null or undefined when calling createSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillCreateDtoToJSON(requestParameters.skillCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillEntityFromJSON(jsonValue));
    }

    /**
     */
    async createSkill(requestParameters: CreateSkillRequest, initOverrides?: RequestInit): Promise<SkillEntity> {
        const response = await this.createSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createSkillKeywordRaw(requestParameters: CreateSkillKeywordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillKeywordEntity>> {
        if (requestParameters.skillKeywordCreateDto === null || requestParameters.skillKeywordCreateDto === undefined) {
            throw new runtime.RequiredError('skillKeywordCreateDto','Required parameter requestParameters.skillKeywordCreateDto was null or undefined when calling createSkillKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skillKeywords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillKeywordCreateDtoToJSON(requestParameters.skillKeywordCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillKeywordEntityFromJSON(jsonValue));
    }

    /**
     */
    async createSkillKeyword(requestParameters: CreateSkillKeywordRequest, initOverrides?: RequestInit): Promise<SkillKeywordEntity> {
        const response = await this.createSkillKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.userCreateDto === null || requestParameters.userCreateDto === undefined) {
            throw new runtime.RequiredError('userCreateDto','Required parameter requestParameters.userCreateDto was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateDtoToJSON(requestParameters.userCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit): Promise<UserEntity> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createVolunteerRaw(requestParameters: CreateVolunteerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolunteerEntity>> {
        if (requestParameters.volunteerCreateDto === null || requestParameters.volunteerCreateDto === undefined) {
            throw new runtime.RequiredError('volunteerCreateDto','Required parameter requestParameters.volunteerCreateDto was null or undefined when calling createVolunteer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volunteers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerCreateDtoToJSON(requestParameters.volunteerCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerEntityFromJSON(jsonValue));
    }

    /**
     */
    async createVolunteer(requestParameters: CreateVolunteerRequest, initOverrides?: RequestInit): Promise<VolunteerEntity> {
        const response = await this.createVolunteerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createWorkRaw(requestParameters: CreateWorkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WorkEntity>> {
        if (requestParameters.workCreateDto === null || requestParameters.workCreateDto === undefined) {
            throw new runtime.RequiredError('workCreateDto','Required parameter requestParameters.workCreateDto was null or undefined when calling createWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/works`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkCreateDtoToJSON(requestParameters.workCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkEntityFromJSON(jsonValue));
    }

    /**
     */
    async createWork(requestParameters: CreateWorkRequest, initOverrides?: RequestInit): Promise<WorkEntity> {
        const response = await this.createWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAwardRaw(requestParameters: DeleteAwardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AwardEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteAward(requestParameters: DeleteAwardRequest, initOverrides?: RequestInit): Promise<AwardEntity> {
        const response = await this.deleteAwardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteBasicRaw(requestParameters: DeleteBasicRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BasicEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBasic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteBasic(requestParameters: DeleteBasicRequest, initOverrides?: RequestInit): Promise<BasicEntity> {
        const response = await this.deleteBasicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteEducationRaw(requestParameters: DeleteEducationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EducationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteEducation(requestParameters: DeleteEducationRequest, initOverrides?: RequestInit): Promise<EducationEntity> {
        const response = await this.deleteEducationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteInterestRaw(requestParameters: DeleteInterestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InterestEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InterestEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteInterest(requestParameters: DeleteInterestRequest, initOverrides?: RequestInit): Promise<InterestEntity> {
        const response = await this.deleteInterestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteLanguageRaw(requestParameters: DeleteLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LanguageEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteLanguage(requestParameters: DeleteLanguageRequest, initOverrides?: RequestInit): Promise<LanguageEntity> {
        const response = await this.deleteLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteLocationRaw(requestParameters: DeleteLocationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteLocation(requestParameters: DeleteLocationRequest, initOverrides?: RequestInit): Promise<LocationEntity> {
        const response = await this.deleteLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteProfileRaw(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProfileEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteProfile(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit): Promise<ProfileEntity> {
        const response = await this.deleteProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit): Promise<ProjectEntity> {
        const response = await this.deleteProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePublicationRaw(requestParameters: DeletePublicationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PublicationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicationEntityFromJSON(jsonValue));
    }

    /**
     */
    async deletePublication(requestParameters: DeletePublicationRequest, initOverrides?: RequestInit): Promise<PublicationEntity> {
        const response = await this.deletePublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteReferenceRaw(requestParameters: DeleteReferenceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReferenceEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteReference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteReference(requestParameters: DeleteReferenceRequest, initOverrides?: RequestInit): Promise<ReferenceEntity> {
        const response = await this.deleteReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSkillRaw(requestParameters: DeleteSkillRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteSkill(requestParameters: DeleteSkillRequest, initOverrides?: RequestInit): Promise<SkillEntity> {
        const response = await this.deleteSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSkillKeywordRaw(requestParameters: DeleteSkillKeywordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillKeywordEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSkillKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillKeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillKeywordEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteSkillKeyword(requestParameters: DeleteSkillKeywordRequest, initOverrides?: RequestInit): Promise<SkillKeywordEntity> {
        const response = await this.deleteSkillKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit): Promise<UserEntity> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteVolunteerRaw(requestParameters: DeleteVolunteerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolunteerEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVolunteer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteVolunteer(requestParameters: DeleteVolunteerRequest, initOverrides?: RequestInit): Promise<VolunteerEntity> {
        const response = await this.deleteVolunteerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteWorkRaw(requestParameters: DeleteWorkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WorkEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteWork(requestParameters: DeleteWorkRequest, initOverrides?: RequestInit): Promise<WorkEntity> {
        const response = await this.deleteWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyAwardRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AwardEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AwardEntityFromJSON));
    }

    /**
     */
    async findManyAward(initOverrides?: RequestInit): Promise<Array<AwardEntity>> {
        const response = await this.findManyAwardRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyBasicRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<BasicEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BasicEntityFromJSON));
    }

    /**
     */
    async findManyBasic(initOverrides?: RequestInit): Promise<Array<BasicEntity>> {
        const response = await this.findManyBasicRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyEducationRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<EducationEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EducationEntityFromJSON));
    }

    /**
     */
    async findManyEducation(initOverrides?: RequestInit): Promise<Array<EducationEntity>> {
        const response = await this.findManyEducationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyInterestRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InterestEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InterestEntityFromJSON));
    }

    /**
     */
    async findManyInterest(initOverrides?: RequestInit): Promise<Array<InterestEntity>> {
        const response = await this.findManyInterestRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyLanguageRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<LanguageEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LanguageEntityFromJSON));
    }

    /**
     */
    async findManyLanguage(initOverrides?: RequestInit): Promise<Array<LanguageEntity>> {
        const response = await this.findManyLanguageRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyLocationRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<LocationEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationEntityFromJSON));
    }

    /**
     */
    async findManyLocation(initOverrides?: RequestInit): Promise<Array<LocationEntity>> {
        const response = await this.findManyLocationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyProfileRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProfileEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProfileEntityFromJSON));
    }

    /**
     */
    async findManyProfile(initOverrides?: RequestInit): Promise<Array<ProfileEntity>> {
        const response = await this.findManyProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyProjectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectEntityFromJSON));
    }

    /**
     */
    async findManyProject(initOverrides?: RequestInit): Promise<Array<ProjectEntity>> {
        const response = await this.findManyProjectRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyPublicationRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PublicationEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PublicationEntityFromJSON));
    }

    /**
     */
    async findManyPublication(initOverrides?: RequestInit): Promise<Array<PublicationEntity>> {
        const response = await this.findManyPublicationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyReferenceRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ReferenceEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReferenceEntityFromJSON));
    }

    /**
     */
    async findManyReference(initOverrides?: RequestInit): Promise<Array<ReferenceEntity>> {
        const response = await this.findManyReferenceRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManySkillRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SkillEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkillEntityFromJSON));
    }

    /**
     */
    async findManySkill(initOverrides?: RequestInit): Promise<Array<SkillEntity>> {
        const response = await this.findManySkillRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManySkillKeywordRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SkillKeywordEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillKeywords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkillKeywordEntityFromJSON));
    }

    /**
     */
    async findManySkillKeyword(initOverrides?: RequestInit): Promise<Array<SkillKeywordEntity>> {
        const response = await this.findManySkillKeywordRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserEntityFromJSON));
    }

    /**
     */
    async findManyUser(initOverrides?: RequestInit): Promise<Array<UserEntity>> {
        const response = await this.findManyUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyVolunteerRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VolunteerEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VolunteerEntityFromJSON));
    }

    /**
     */
    async findManyVolunteer(initOverrides?: RequestInit): Promise<Array<VolunteerEntity>> {
        const response = await this.findManyVolunteerRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyWorkRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<WorkEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkEntityFromJSON));
    }

    /**
     */
    async findManyWork(initOverrides?: RequestInit): Promise<Array<WorkEntity>> {
        const response = await this.findManyWorkRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneAwardRaw(requestParameters: FindOneAwardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AwardEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneAward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneAward(requestParameters: FindOneAwardRequest, initOverrides?: RequestInit): Promise<AwardEntity> {
        const response = await this.findOneAwardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneBasicRaw(requestParameters: FindOneBasicRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BasicEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneBasic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneBasic(requestParameters: FindOneBasicRequest, initOverrides?: RequestInit): Promise<BasicEntity> {
        const response = await this.findOneBasicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneEducationRaw(requestParameters: FindOneEducationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EducationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneEducation(requestParameters: FindOneEducationRequest, initOverrides?: RequestInit): Promise<EducationEntity> {
        const response = await this.findOneEducationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneInterestRaw(requestParameters: FindOneInterestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InterestEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InterestEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneInterest(requestParameters: FindOneInterestRequest, initOverrides?: RequestInit): Promise<InterestEntity> {
        const response = await this.findOneInterestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneLanguageRaw(requestParameters: FindOneLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LanguageEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneLanguage(requestParameters: FindOneLanguageRequest, initOverrides?: RequestInit): Promise<LanguageEntity> {
        const response = await this.findOneLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneLocationRaw(requestParameters: FindOneLocationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneLocation(requestParameters: FindOneLocationRequest, initOverrides?: RequestInit): Promise<LocationEntity> {
        const response = await this.findOneLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneProfileRaw(requestParameters: FindOneProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProfileEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneProfile(requestParameters: FindOneProfileRequest, initOverrides?: RequestInit): Promise<ProfileEntity> {
        const response = await this.findOneProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneProjectRaw(requestParameters: FindOneProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneProject(requestParameters: FindOneProjectRequest, initOverrides?: RequestInit): Promise<ProjectEntity> {
        const response = await this.findOneProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOnePublicationRaw(requestParameters: FindOnePublicationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PublicationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOnePublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicationEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOnePublication(requestParameters: FindOnePublicationRequest, initOverrides?: RequestInit): Promise<PublicationEntity> {
        const response = await this.findOnePublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneReferenceRaw(requestParameters: FindOneReferenceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReferenceEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneReference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneReference(requestParameters: FindOneReferenceRequest, initOverrides?: RequestInit): Promise<ReferenceEntity> {
        const response = await this.findOneReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneSkillRaw(requestParameters: FindOneSkillRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneSkill(requestParameters: FindOneSkillRequest, initOverrides?: RequestInit): Promise<SkillEntity> {
        const response = await this.findOneSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneSkillKeywordRaw(requestParameters: FindOneSkillKeywordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillKeywordEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneSkillKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillKeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillKeywordEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneSkillKeyword(requestParameters: FindOneSkillKeywordRequest, initOverrides?: RequestInit): Promise<SkillKeywordEntity> {
        const response = await this.findOneSkillKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneUserRaw(requestParameters: FindOneUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneUser(requestParameters: FindOneUserRequest, initOverrides?: RequestInit): Promise<UserEntity> {
        const response = await this.findOneUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneVolunteerRaw(requestParameters: FindOneVolunteerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolunteerEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneVolunteer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneVolunteer(requestParameters: FindOneVolunteerRequest, initOverrides?: RequestInit): Promise<VolunteerEntity> {
        const response = await this.findOneVolunteerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneWorkRaw(requestParameters: FindOneWorkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WorkEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneWork(requestParameters: FindOneWorkRequest, initOverrides?: RequestInit): Promise<WorkEntity> {
        const response = await this.findOneWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAwardRaw(requestParameters: UpdateAwardRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AwardEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAward.');
        }

        if (requestParameters.awardUpdateDto === null || requestParameters.awardUpdateDto === undefined) {
            throw new runtime.RequiredError('awardUpdateDto','Required parameter requestParameters.awardUpdateDto was null or undefined when calling updateAward.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/awards/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AwardUpdateDtoToJSON(requestParameters.awardUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateAward(requestParameters: UpdateAwardRequest, initOverrides?: RequestInit): Promise<AwardEntity> {
        const response = await this.updateAwardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateBasicRaw(requestParameters: UpdateBasicRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BasicEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBasic.');
        }

        if (requestParameters.basicUpdateDto === null || requestParameters.basicUpdateDto === undefined) {
            throw new runtime.RequiredError('basicUpdateDto','Required parameter requestParameters.basicUpdateDto was null or undefined when calling updateBasic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/basics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BasicUpdateDtoToJSON(requestParameters.basicUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BasicEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateBasic(requestParameters: UpdateBasicRequest, initOverrides?: RequestInit): Promise<BasicEntity> {
        const response = await this.updateBasicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateEducationRaw(requestParameters: UpdateEducationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EducationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEducation.');
        }

        if (requestParameters.educationUpdateDto === null || requestParameters.educationUpdateDto === undefined) {
            throw new runtime.RequiredError('educationUpdateDto','Required parameter requestParameters.educationUpdateDto was null or undefined when calling updateEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EducationUpdateDtoToJSON(requestParameters.educationUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateEducation(requestParameters: UpdateEducationRequest, initOverrides?: RequestInit): Promise<EducationEntity> {
        const response = await this.updateEducationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateInterestRaw(requestParameters: UpdateInterestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InterestEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInterest.');
        }

        if (requestParameters.interestUpdateDto === null || requestParameters.interestUpdateDto === undefined) {
            throw new runtime.RequiredError('interestUpdateDto','Required parameter requestParameters.interestUpdateDto was null or undefined when calling updateInterest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/interests/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InterestUpdateDtoToJSON(requestParameters.interestUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InterestEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateInterest(requestParameters: UpdateInterestRequest, initOverrides?: RequestInit): Promise<InterestEntity> {
        const response = await this.updateInterestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLanguageRaw(requestParameters: UpdateLanguageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LanguageEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLanguage.');
        }

        if (requestParameters.languageUpdateDto === null || requestParameters.languageUpdateDto === undefined) {
            throw new runtime.RequiredError('languageUpdateDto','Required parameter requestParameters.languageUpdateDto was null or undefined when calling updateLanguage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/languages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LanguageUpdateDtoToJSON(requestParameters.languageUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateLanguage(requestParameters: UpdateLanguageRequest, initOverrides?: RequestInit): Promise<LanguageEntity> {
        const response = await this.updateLanguageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLocationRaw(requestParameters: UpdateLocationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLocation.');
        }

        if (requestParameters.locationUpdateDto === null || requestParameters.locationUpdateDto === undefined) {
            throw new runtime.RequiredError('locationUpdateDto','Required parameter requestParameters.locationUpdateDto was null or undefined when calling updateLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LocationUpdateDtoToJSON(requestParameters.locationUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateLocation(requestParameters: UpdateLocationRequest, initOverrides?: RequestInit): Promise<LocationEntity> {
        const response = await this.updateLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProfileRaw(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProfileEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProfile.');
        }

        if (requestParameters.profileUpdateDto === null || requestParameters.profileUpdateDto === undefined) {
            throw new runtime.RequiredError('profileUpdateDto','Required parameter requestParameters.profileUpdateDto was null or undefined when calling updateProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileUpdateDtoToJSON(requestParameters.profileUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateProfile(requestParameters: UpdateProfileRequest, initOverrides?: RequestInit): Promise<ProfileEntity> {
        const response = await this.updateProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProject.');
        }

        if (requestParameters.projectUpdateDto === null || requestParameters.projectUpdateDto === undefined) {
            throw new runtime.RequiredError('projectUpdateDto','Required parameter requestParameters.projectUpdateDto was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpdateDtoToJSON(requestParameters.projectUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit): Promise<ProjectEntity> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePublicationRaw(requestParameters: UpdatePublicationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PublicationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePublication.');
        }

        if (requestParameters.publicationUpdateDto === null || requestParameters.publicationUpdateDto === undefined) {
            throw new runtime.RequiredError('publicationUpdateDto','Required parameter requestParameters.publicationUpdateDto was null or undefined when calling updatePublication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/publications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PublicationUpdateDtoToJSON(requestParameters.publicationUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicationEntityFromJSON(jsonValue));
    }

    /**
     */
    async updatePublication(requestParameters: UpdatePublicationRequest, initOverrides?: RequestInit): Promise<PublicationEntity> {
        const response = await this.updatePublicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateReferenceRaw(requestParameters: UpdateReferenceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReferenceEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateReference.');
        }

        if (requestParameters.referenceUpdateDto === null || requestParameters.referenceUpdateDto === undefined) {
            throw new runtime.RequiredError('referenceUpdateDto','Required parameter requestParameters.referenceUpdateDto was null or undefined when calling updateReference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/references/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ReferenceUpdateDtoToJSON(requestParameters.referenceUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateReference(requestParameters: UpdateReferenceRequest, initOverrides?: RequestInit): Promise<ReferenceEntity> {
        const response = await this.updateReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSkillRaw(requestParameters: UpdateSkillRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSkill.');
        }

        if (requestParameters.skillUpdateDto === null || requestParameters.skillUpdateDto === undefined) {
            throw new runtime.RequiredError('skillUpdateDto','Required parameter requestParameters.skillUpdateDto was null or undefined when calling updateSkill.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SkillUpdateDtoToJSON(requestParameters.skillUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateSkill(requestParameters: UpdateSkillRequest, initOverrides?: RequestInit): Promise<SkillEntity> {
        const response = await this.updateSkillRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSkillKeywordRaw(requestParameters: UpdateSkillKeywordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillKeywordEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSkillKeyword.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateSkillKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skillKeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillKeywordEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateSkillKeyword(requestParameters: UpdateSkillKeywordRequest, initOverrides?: RequestInit): Promise<SkillKeywordEntity> {
        const response = await this.updateSkillKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit): Promise<UserEntity> {
        const response = await this.updateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateVolunteerRaw(requestParameters: UpdateVolunteerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VolunteerEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateVolunteer.');
        }

        if (requestParameters.volunteerUpdateDto === null || requestParameters.volunteerUpdateDto === undefined) {
            throw new runtime.RequiredError('volunteerUpdateDto','Required parameter requestParameters.volunteerUpdateDto was null or undefined when calling updateVolunteer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/volunteers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: VolunteerUpdateDtoToJSON(requestParameters.volunteerUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VolunteerEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateVolunteer(requestParameters: UpdateVolunteerRequest, initOverrides?: RequestInit): Promise<VolunteerEntity> {
        const response = await this.updateVolunteerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateWorkRaw(requestParameters: UpdateWorkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<WorkEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWork.');
        }

        if (requestParameters.workUpdateDto === null || requestParameters.workUpdateDto === undefined) {
            throw new runtime.RequiredError('workUpdateDto','Required parameter requestParameters.workUpdateDto was null or undefined when calling updateWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/works/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: WorkUpdateDtoToJSON(requestParameters.workUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateWork(requestParameters: UpdateWorkRequest, initOverrides?: RequestInit): Promise<WorkEntity> {
        const response = await this.updateWorkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
