/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EducationsCreateDto,
    EducationsCreateDtoFromJSON,
    EducationsCreateDtoToJSON,
    EducationsUpdateDto,
    EducationsUpdateDtoFromJSON,
    EducationsUpdateDtoToJSON,
} from '../models';

export interface EducationsEntityControllerCreateRequest {
    educationsCreateDto: EducationsCreateDto;
}

export interface EducationsEntityControllerDeleteRequest {
    id: string;
}

export interface EducationsEntityControllerFindOneRequest {
    id: string;
}

export interface EducationsEntityControllerUpdateRequest {
    id: string;
    educationsUpdateDto: EducationsUpdateDto;
}

/**
 * 
 */
export class EducationsApi extends runtime.BaseAPI {

    /**
     */
    async educationsEntityControllerCreateRaw(requestParameters: EducationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.educationsCreateDto === null || requestParameters.educationsCreateDto === undefined) {
            throw new runtime.RequiredError('educationsCreateDto','Required parameter requestParameters.educationsCreateDto was null or undefined when calling educationsEntityControllerCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EducationsCreateDtoToJSON(requestParameters.educationsCreateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerCreate(requestParameters: EducationsEntityControllerCreateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async educationsEntityControllerDeleteRaw(requestParameters: EducationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling educationsEntityControllerDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerDelete(requestParameters: EducationsEntityControllerDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async educationsEntityControllerFindManyRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerFindMany(initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerFindManyRaw(initOverrides);
    }

    /**
     */
    async educationsEntityControllerFindOneRaw(requestParameters: EducationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling educationsEntityControllerFindOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerFindOne(requestParameters: EducationsEntityControllerFindOneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     */
    async educationsEntityControllerUpdateRaw(requestParameters: EducationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling educationsEntityControllerUpdate.');
        }

        if (requestParameters.educationsUpdateDto === null || requestParameters.educationsUpdateDto === undefined) {
            throw new runtime.RequiredError('educationsUpdateDto','Required parameter requestParameters.educationsUpdateDto was null or undefined when calling educationsEntityControllerUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/educations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EducationsUpdateDtoToJSON(requestParameters.educationsUpdateDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async educationsEntityControllerUpdate(requestParameters: EducationsEntityControllerUpdateRequest, initOverrides?: RequestInit): Promise<void> {
        await this.educationsEntityControllerUpdateRaw(requestParameters, initOverrides);
    }

}
