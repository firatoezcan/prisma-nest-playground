/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SkillKeywordCreateDto,
    SkillKeywordCreateDtoFromJSON,
    SkillKeywordCreateDtoToJSON,
    SkillKeywordEntity,
    SkillKeywordEntityFromJSON,
    SkillKeywordEntityToJSON,
} from '../models';

export interface CreateSkillKeywordRequest {
    skillKeywordCreateDto: SkillKeywordCreateDto;
}

export interface DeleteSkillKeywordRequest {
    id: string;
}

export interface FindOneSkillKeywordRequest {
    id: string;
}

export interface UpdateSkillKeywordRequest {
    id: string;
    body: object;
}

/**
 * 
 */
export class SkillKeywordApi extends runtime.BaseAPI {

    /**
     */
    async createSkillKeywordRaw(requestParameters: CreateSkillKeywordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillKeywordEntity>> {
        if (requestParameters.skillKeywordCreateDto === null || requestParameters.skillKeywordCreateDto === undefined) {
            throw new runtime.RequiredError('skillKeywordCreateDto','Required parameter requestParameters.skillKeywordCreateDto was null or undefined when calling createSkillKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skillKeywords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkillKeywordCreateDtoToJSON(requestParameters.skillKeywordCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillKeywordEntityFromJSON(jsonValue));
    }

    /**
     */
    async createSkillKeyword(requestParameters: CreateSkillKeywordRequest, initOverrides?: RequestInit): Promise<SkillKeywordEntity> {
        const response = await this.createSkillKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSkillKeywordRaw(requestParameters: DeleteSkillKeywordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillKeywordEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSkillKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillKeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillKeywordEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteSkillKeyword(requestParameters: DeleteSkillKeywordRequest, initOverrides?: RequestInit): Promise<SkillKeywordEntity> {
        const response = await this.deleteSkillKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findManySkillKeywordRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SkillKeywordEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillKeywords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkillKeywordEntityFromJSON));
    }

    /**
     */
    async findManySkillKeyword(initOverrides?: RequestInit): Promise<Array<SkillKeywordEntity>> {
        const response = await this.findManySkillKeywordRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneSkillKeywordRaw(requestParameters: FindOneSkillKeywordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillKeywordEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneSkillKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/skillKeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillKeywordEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneSkillKeyword(requestParameters: FindOneSkillKeywordRequest, initOverrides?: RequestInit): Promise<SkillKeywordEntity> {
        const response = await this.findOneSkillKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSkillKeywordRaw(requestParameters: UpdateSkillKeywordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SkillKeywordEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSkillKeyword.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateSkillKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/skillKeywords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkillKeywordEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateSkillKeyword(requestParameters: UpdateSkillKeywordRequest, initOverrides?: RequestInit): Promise<SkillKeywordEntity> {
        const response = await this.updateSkillKeywordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
