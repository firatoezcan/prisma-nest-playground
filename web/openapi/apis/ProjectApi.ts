/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProjectCreateDto,
    ProjectCreateDtoFromJSON,
    ProjectCreateDtoToJSON,
    ProjectEntity,
    ProjectEntityFromJSON,
    ProjectEntityToJSON,
    ProjectUpdateDto,
    ProjectUpdateDtoFromJSON,
    ProjectUpdateDtoToJSON,
} from '../models';

export interface CreateProjectRequest {
    projectCreateDto: ProjectCreateDto;
}

export interface DeleteProjectRequest {
    id: string;
}

export interface FindOneProjectRequest {
    id: string;
}

export interface UpdateProjectRequest {
    id: string;
    projectUpdateDto: ProjectUpdateDto;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEntity>> {
        if (requestParameters.projectCreateDto === null || requestParameters.projectCreateDto === undefined) {
            throw new runtime.RequiredError('projectCreateDto','Required parameter requestParameters.projectCreateDto was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectCreateDtoToJSON(requestParameters.projectCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectEntityFromJSON(jsonValue));
    }

    /**
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit): Promise<ProjectEntity> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit): Promise<ProjectEntity> {
        const response = await this.deleteProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyProjectRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectEntityFromJSON));
    }

    /**
     */
    async findManyProject(initOverrides?: RequestInit): Promise<Array<ProjectEntity>> {
        const response = await this.findManyProjectRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneProjectRaw(requestParameters: FindOneProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneProject(requestParameters: FindOneProjectRequest, initOverrides?: RequestInit): Promise<ProjectEntity> {
        const response = await this.findOneProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProject.');
        }

        if (requestParameters.projectUpdateDto === null || requestParameters.projectUpdateDto === undefined) {
            throw new runtime.RequiredError('projectUpdateDto','Required parameter requestParameters.projectUpdateDto was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpdateDtoToJSON(requestParameters.projectUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit): Promise<ProjectEntity> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
