/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LocationCreateDto,
    LocationCreateDtoFromJSON,
    LocationCreateDtoToJSON,
    LocationEntity,
    LocationEntityFromJSON,
    LocationEntityToJSON,
    LocationUpdateDto,
    LocationUpdateDtoFromJSON,
    LocationUpdateDtoToJSON,
} from '../models';

export interface CreateLocationRequest {
    locationCreateDto: LocationCreateDto;
}

export interface DeleteLocationRequest {
    id: string;
}

export interface FindOneLocationRequest {
    id: string;
}

export interface UpdateLocationRequest {
    id: string;
    locationUpdateDto: LocationUpdateDto;
}

/**
 * 
 */
export class LocationApi extends runtime.BaseAPI {

    /**
     */
    async createLocationRaw(requestParameters: CreateLocationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationEntity>> {
        if (requestParameters.locationCreateDto === null || requestParameters.locationCreateDto === undefined) {
            throw new runtime.RequiredError('locationCreateDto','Required parameter requestParameters.locationCreateDto was null or undefined when calling createLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationCreateDtoToJSON(requestParameters.locationCreateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEntityFromJSON(jsonValue));
    }

    /**
     */
    async createLocation(requestParameters: CreateLocationRequest, initOverrides?: RequestInit): Promise<LocationEntity> {
        const response = await this.createLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteLocationRaw(requestParameters: DeleteLocationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEntityFromJSON(jsonValue));
    }

    /**
     */
    async deleteLocation(requestParameters: DeleteLocationRequest, initOverrides?: RequestInit): Promise<LocationEntity> {
        const response = await this.deleteLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findManyLocationRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<LocationEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationEntityFromJSON));
    }

    /**
     */
    async findManyLocation(initOverrides?: RequestInit): Promise<Array<LocationEntity>> {
        const response = await this.findManyLocationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneLocationRaw(requestParameters: FindOneLocationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEntityFromJSON(jsonValue));
    }

    /**
     */
    async findOneLocation(requestParameters: FindOneLocationRequest, initOverrides?: RequestInit): Promise<LocationEntity> {
        const response = await this.findOneLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLocationRaw(requestParameters: UpdateLocationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LocationEntity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLocation.');
        }

        if (requestParameters.locationUpdateDto === null || requestParameters.locationUpdateDto === undefined) {
            throw new runtime.RequiredError('locationUpdateDto','Required parameter requestParameters.locationUpdateDto was null or undefined when calling updateLocation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LocationUpdateDtoToJSON(requestParameters.locationUpdateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationEntityFromJSON(jsonValue));
    }

    /**
     */
    async updateLocation(requestParameters: UpdateLocationRequest, initOverrides?: RequestInit): Promise<LocationEntity> {
        const response = await this.updateLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
