/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SchemaEnumTypes,
    SchemaEnumTypesFromJSON,
    SchemaEnumTypesFromJSONTyped,
    SchemaEnumTypesToJSON,
} from './SchemaEnumTypes';
import {
    SchemaInputObjectTypes,
    SchemaInputObjectTypesFromJSON,
    SchemaInputObjectTypesFromJSONTyped,
    SchemaInputObjectTypesToJSON,
} from './SchemaInputObjectTypes';
import {
    SchemaOutputObjectTypes,
    SchemaOutputObjectTypesFromJSON,
    SchemaOutputObjectTypesFromJSONTyped,
    SchemaOutputObjectTypesToJSON,
} from './SchemaOutputObjectTypes';

/**
 * 
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    rootQueryType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Schema
     */
    rootMutationType?: string | null;
    /**
     * 
     * @type {SchemaInputObjectTypes}
     * @memberof Schema
     */
    inputObjectTypes: SchemaInputObjectTypes;
    /**
     * 
     * @type {SchemaOutputObjectTypes}
     * @memberof Schema
     */
    outputObjectTypes: SchemaOutputObjectTypes;
    /**
     * 
     * @type {SchemaEnumTypes}
     * @memberof Schema
     */
    enumTypes: SchemaEnumTypes;
}

export function SchemaFromJSON(json: any): Schema {
    return SchemaFromJSONTyped(json, false);
}

export function SchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): Schema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rootQueryType': !exists(json, 'rootQueryType') ? undefined : json['rootQueryType'],
        'rootMutationType': !exists(json, 'rootMutationType') ? undefined : json['rootMutationType'],
        'inputObjectTypes': SchemaInputObjectTypesFromJSON(json['inputObjectTypes']),
        'outputObjectTypes': SchemaOutputObjectTypesFromJSON(json['outputObjectTypes']),
        'enumTypes': SchemaEnumTypesFromJSON(json['enumTypes']),
    };
}

export function SchemaToJSON(value?: Schema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rootQueryType': value.rootQueryType,
        'rootMutationType': value.rootMutationType,
        'inputObjectTypes': SchemaInputObjectTypesToJSON(value.inputObjectTypes),
        'outputObjectTypes': SchemaOutputObjectTypesToJSON(value.outputObjectTypes),
        'enumTypes': SchemaEnumTypesToJSON(value.enumTypes),
    };
}

