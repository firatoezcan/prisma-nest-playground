/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FieldDefault,
    FieldDefaultFromJSON,
    FieldDefaultFromJSONTyped,
    FieldDefaultToJSON,
} from './FieldDefault';
import {
    OutputType,
    OutputTypeFromJSON,
    OutputTypeFromJSONTyped,
    OutputTypeToJSON,
} from './OutputType';
import {
    SchemaArg,
    SchemaArgFromJSON,
    SchemaArgFromJSONTyped,
    SchemaArgToJSON,
} from './SchemaArg';
import {
    SchemaEnum,
    SchemaEnumFromJSON,
    SchemaEnumFromJSONTyped,
    SchemaEnumToJSON,
} from './SchemaEnum';

/**
 * 
 * @export
 * @interface Field
 */
export interface Field {
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    kind: FieldKindEnum;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    isRequired: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    isList: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    isUnique: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    isId: boolean;
    /**
     * 
     * @type {string | SchemaEnum | OutputType | SchemaArg}
     * @memberof Field
     */
    type: string | SchemaEnum | OutputType | SchemaArg | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Field
     */
    dbNames?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    isGenerated: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Field
     */
    hasDefaultValue: boolean;
    /**
     * 
     * @type {string | boolean | number | FieldDefault}
     * @memberof Field
     */
    _default?: string | boolean | number | FieldDefault | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Field
     */
    relationToFields?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    relationOnDelete?: string;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    relationName?: string;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    documentation?: string;
}

/**
* @export
* @enum {string}
*/
export enum FieldKindEnum {
    Scalar = 'scalar',
    Object = 'object',
    Enum = 'enum',
    Unsupported = 'unsupported'
}

export function FieldFromJSON(json: any): Field {
    return FieldFromJSONTyped(json, false);
}

export function FieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): Field {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kind': json['kind'],
        'name': json['name'],
        'isRequired': json['isRequired'],
        'isList': json['isList'],
        'isUnique': json['isUnique'],
        'isId': json['isId'],
        'type':(json['type']),
        'dbNames': !exists(json, 'dbNames') ? undefined : json['dbNames'],
        'isGenerated': json['isGenerated'],
        'hasDefaultValue': json['hasDefaultValue'],
        '_default':(json['default']),
        'relationToFields': !exists(json, 'relationToFields') ? undefined : json['relationToFields'],
        'relationOnDelete': !exists(json, 'relationOnDelete') ? undefined : json['relationOnDelete'],
        'relationName': !exists(json, 'relationName') ? undefined : json['relationName'],
        'documentation': !exists(json, 'documentation') ? undefined : json['documentation'],
    };
}

export function FieldToJSON(value?: Field | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kind': value.kind,
        'name': value.name,
        'isRequired': value.isRequired,
        'isList': value.isList,
        'isUnique': value.isUnique,
        'isId': value.isId,
        'type':(value.type),
        'dbNames': value.dbNames,
        'isGenerated': value.isGenerated,
        'hasDefaultValue': value.hasDefaultValue,
        'default':(value._default),
        'relationToFields': value.relationToFields,
        'relationOnDelete': value.relationOnDelete,
        'relationName': value.relationName,
        'documentation': value.documentation,
    };
}

