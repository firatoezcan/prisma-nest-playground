/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ModelMapping
 */
export interface ModelMapping {
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    plural: string;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    findUnique?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    findFirst?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    findMany?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    create?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    createMany?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    update?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    updateMany?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    upsert?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    _delete?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    deleteMany?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    aggregate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    groupBy?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ModelMapping
     */
    count?: string | null;
}

export function ModelMappingFromJSON(json: any): ModelMapping {
    return ModelMappingFromJSONTyped(json, false);
}

export function ModelMappingFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelMapping {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'model': json['model'],
        'plural': json['plural'],
        'findUnique': !exists(json, 'findUnique') ? undefined : json['findUnique'],
        'findFirst': !exists(json, 'findFirst') ? undefined : json['findFirst'],
        'findMany': !exists(json, 'findMany') ? undefined : json['findMany'],
        'create': !exists(json, 'create') ? undefined : json['create'],
        'createMany': !exists(json, 'createMany') ? undefined : json['createMany'],
        'update': !exists(json, 'update') ? undefined : json['update'],
        'updateMany': !exists(json, 'updateMany') ? undefined : json['updateMany'],
        'upsert': !exists(json, 'upsert') ? undefined : json['upsert'],
        '_delete': !exists(json, 'delete') ? undefined : json['delete'],
        'deleteMany': !exists(json, 'deleteMany') ? undefined : json['deleteMany'],
        'aggregate': !exists(json, 'aggregate') ? undefined : json['aggregate'],
        'groupBy': !exists(json, 'groupBy') ? undefined : json['groupBy'],
        'count': !exists(json, 'count') ? undefined : json['count'],
    };
}

export function ModelMappingToJSON(value?: ModelMapping | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model': value.model,
        'plural': value.plural,
        'findUnique': value.findUnique,
        'findFirst': value.findFirst,
        'findMany': value.findMany,
        'create': value.create,
        'createMany': value.createMany,
        'update': value.update,
        'updateMany': value.updateMany,
        'upsert': value.upsert,
        'delete': value._delete,
        'deleteMany': value.deleteMany,
        'aggregate': value.aggregate,
        'groupBy': value.groupBy,
        'count': value.count,
    };
}

