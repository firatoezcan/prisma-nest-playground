/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Field,
    FieldFromJSON,
    FieldFromJSONTyped,
    FieldToJSON,
} from './Field';
import {
    PrimaryKey,
    PrimaryKeyFromJSON,
    PrimaryKeyFromJSONTyped,
    PrimaryKeyToJSON,
} from './PrimaryKey';
import {
    UniqueIndex,
    UniqueIndexFromJSON,
    UniqueIndexFromJSONTyped,
    UniqueIndexToJSON,
} from './UniqueIndex';

/**
 * 
 * @export
 * @interface Model
 */
export interface Model {
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    dbName: string | null;
    /**
     * 
     * @type {Array<Field>}
     * @memberof Model
     */
    fields: Array<Field>;
    /**
     * 
     * @type {{ [key: string]: Field; }}
     * @memberof Model
     */
    fieldMap?: { [key: string]: Field; };
    /**
     * 
     * @type {Array<Array<string>>}
     * @memberof Model
     */
    uniqueFields: Array<Array<string>>;
    /**
     * 
     * @type {Array<UniqueIndex>}
     * @memberof Model
     */
    uniqueIndexes: Array<UniqueIndex>;
    /**
     * 
     * @type {string}
     * @memberof Model
     */
    documentation: string;
    /**
     * 
     * @type {PrimaryKey}
     * @memberof Model
     */
    primaryKey: PrimaryKey | null;
}

export function ModelFromJSON(json: any): Model {
    return ModelFromJSONTyped(json, false);
}

export function ModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): Model {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'dbName': json['dbName'],
        'fields': ((json['fields'] as Array<any>).map(FieldFromJSON)),
        'fieldMap': !exists(json, 'fieldMap') ? undefined : (mapValues(json['fieldMap'], FieldFromJSON)),
        'uniqueFields': json['uniqueFields'],
        'uniqueIndexes': ((json['uniqueIndexes'] as Array<any>).map(UniqueIndexFromJSON)),
        'documentation': json['documentation'],
        'primaryKey': PrimaryKeyFromJSON(json['primaryKey']),
    };
}

export function ModelToJSON(value?: Model | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'dbName': value.dbName,
        'fields': ((value.fields as Array<any>).map(FieldToJSON)),
        'fieldMap': value.fieldMap === undefined ? undefined : (mapValues(value.fieldMap, FieldToJSON)),
        'uniqueFields': value.uniqueFields,
        'uniqueIndexes': ((value.uniqueIndexes as Array<any>).map(UniqueIndexToJSON)),
        'documentation': value.documentation,
        'primaryKey': PrimaryKeyToJSON(value.primaryKey),
    };
}

