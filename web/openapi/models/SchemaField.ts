/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SchemaFieldOutputType,
    SchemaFieldOutputTypeFromJSON,
    SchemaFieldOutputTypeFromJSONTyped,
    SchemaFieldOutputTypeToJSON,
} from './SchemaFieldOutputType';

/**
 * 
 * @export
 * @interface SchemaField
 */
export interface SchemaField {
    /**
     * 
     * @type {string}
     * @memberof SchemaField
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof SchemaField
     */
    isNullable?: boolean;
    /**
     * 
     * @type {SchemaFieldOutputType}
     * @memberof SchemaField
     */
    outputType: SchemaFieldOutputType;
    /**
     * 
     * @type {Array<object>}
     * @memberof SchemaField
     */
    args: Array<object>;
    /**
     * 
     * @type {object}
     * @memberof SchemaField
     */
    deprecation?: object;
    /**
     * 
     * @type {string}
     * @memberof SchemaField
     */
    documentation?: string;
}

export function SchemaFieldFromJSON(json: any): SchemaField {
    return SchemaFieldFromJSONTyped(json, false);
}

export function SchemaFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaField {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'isNullable': !exists(json, 'isNullable') ? undefined : json['isNullable'],
        'outputType': SchemaFieldOutputTypeFromJSON(json['outputType']),
        'args': json['args'],
        'deprecation': !exists(json, 'deprecation') ? undefined : json['deprecation'],
        'documentation': !exists(json, 'documentation') ? undefined : json['documentation'],
    };
}

export function SchemaFieldToJSON(value?: SchemaField | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'isNullable': value.isNullable,
        'outputType': SchemaFieldOutputTypeToJSON(value.outputType),
        'args': value.args,
        'deprecation': value.deprecation,
        'documentation': value.documentation,
    };
}

