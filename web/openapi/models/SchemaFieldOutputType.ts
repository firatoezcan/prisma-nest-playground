/* tslint:disable */
/* eslint-disable */
/**
 * JSON Resume
 * Standarized resumes
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OutputType,
    OutputTypeFromJSON,
    OutputTypeFromJSONTyped,
    OutputTypeToJSON,
} from './OutputType';
import {
    SchemaEnum,
    SchemaEnumFromJSON,
    SchemaEnumFromJSONTyped,
    SchemaEnumToJSON,
} from './SchemaEnum';

/**
 * 
 * @export
 * @interface SchemaFieldOutputType
 */
export interface SchemaFieldOutputType {
    /**
     * 
     * @type {string | OutputType | SchemaEnum}
     * @memberof SchemaFieldOutputType
     */
    type: string | OutputType | SchemaEnum | null;
    /**
     * 
     * @type {boolean}
     * @memberof SchemaFieldOutputType
     */
    isList: boolean;
    /**
     * 
     * @type {string}
     * @memberof SchemaFieldOutputType
     */
    location: SchemaFieldOutputTypeLocationEnum;
    /**
     * 
     * @type {string}
     * @memberof SchemaFieldOutputType
     */
    namespace?: SchemaFieldOutputTypeNamespaceEnum;
}

/**
* @export
* @enum {string}
*/
export enum SchemaFieldOutputTypeLocationEnum {
    Scalar = 'scalar',
    InputObjectTypes = 'inputObjectTypes',
    OutputObjectTypes = 'outputObjectTypes',
    EnumTypes = 'enumTypes'
}/**
* @export
* @enum {string}
*/
export enum SchemaFieldOutputTypeNamespaceEnum {
    Model = 'model',
    Prisma = 'prisma'
}

export function SchemaFieldOutputTypeFromJSON(json: any): SchemaFieldOutputType {
    return SchemaFieldOutputTypeFromJSONTyped(json, false);
}

export function SchemaFieldOutputTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaFieldOutputType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type':(json['type']),
        'isList': json['isList'],
        'location': json['location'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
    };
}

export function SchemaFieldOutputTypeToJSON(value?: SchemaFieldOutputType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type':(value.type),
        'isList': value.isList,
        'location': value.location,
        'namespace': value.namespace,
    };
}

